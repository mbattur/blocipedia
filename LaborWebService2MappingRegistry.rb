# encoding: UTF-8
# Generated by wsdl2ruby (SOAP4R-NG/2.0.3)
require_relative 'LaborWebService2.rb'
require 'soap/mapping'

module LaborWebService2MappingRegistry
  EncodedRegistry = ::SOAP::Mapping::EncodedRegistry.new
  LiteralRegistry = ::SOAP::Mapping::LiteralRegistry.new
  NsPosWebService = "http://schemas.datacontract.org/2004/07/Pos.Web.Service"
  NsSystem = "http://schemas.datacontract.org/2004/07/System"
  NsV2 = "http://www.brinksoftware.com/webservices/labor/v2"

  EncodedRegistry.register(
    :class => GetLaborScheduleRequest,
    :schema_type => XSD::QName.new(NsV2, "GetLaborScheduleRequest"),
    :schema_element => [
      ["endDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "EndDate")], [0, 1]],
      ["startDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "StartDate")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetLaborScheduleReply,
    :schema_type => XSD::QName.new(NsV2, "GetLaborScheduleReply"),
    :schema_basetype => XSD::QName.new(NsV2, "LaborWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["laborSchedule", ["LaborSchedule", XSD::QName.new(NsV2, "LaborSchedule")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => LaborWebService2Reply,
    :schema_type => XSD::QName.new(NsV2, "LaborWebService2Reply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => LaborSchedule,
    :schema_type => XSD::QName.new(NsV2, "LaborSchedule"),
    :schema_element => [
      ["days", ["ArrayOfLaborScheduleDay", XSD::QName.new(NsV2, "Days")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfLaborScheduleDay,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfLaborScheduleDay"),
    :schema_element => [
      ["laborScheduleDay", ["LaborScheduleDay[]", XSD::QName.new(NsV2, "LaborScheduleDay")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => LaborScheduleDay,
    :schema_type => XSD::QName.new(NsV2, "LaborScheduleDay"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["shifts", ["ArrayOfScheduledShift", XSD::QName.new(NsV2, "Shifts")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfScheduledShift,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfScheduledShift"),
    :schema_element => [
      ["scheduledShift", ["ScheduledShift[]", XSD::QName.new(NsV2, "ScheduledShift")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ScheduledShift,
    :schema_type => XSD::QName.new(NsV2, "ScheduledShift"),
    :schema_element => [
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["endTime", [nil, XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["jobId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "JobId")], [0, 1]],
      ["startTime", [nil, XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetShiftsRequest,
    :schema_type => XSD::QName.new(NsV2, "GetShiftsRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["modifiedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ModifiedTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetShiftsReply,
    :schema_type => XSD::QName.new(NsV2, "GetShiftsReply"),
    :schema_basetype => XSD::QName.new(NsV2, "LaborWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["shifts", ["ArrayOfShift", XSD::QName.new(NsV2, "Shifts")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfShift,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfShift"),
    :schema_element => [
      ["shift", ["Shift[]", XSD::QName.new(NsV2, "Shift")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => Shift,
    :schema_type => XSD::QName.new(NsV2, "Shift"),
    :schema_element => [
      ["breaks", ["ArrayOfBreak", XSD::QName.new(NsV2, "Breaks")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["clockOutBusinessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "ClockOutBusinessDate")], [0, 1]],
      ["declaredTips", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DeclaredTips")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["endTime", ["DateTimeOffset", XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["extendedMinutesWorked", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ExtendedMinutesWorked")], [0, 1]],
      ["id", [nil, XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["jobId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "JobId")], [0, 1]],
      ["minutesWorked", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MinutesWorked")], [0, 1]],
      ["modifiedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ModifiedTime")], [0, 1]],
      ["number", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["overtimeMinutesWorked", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OvertimeMinutesWorked")], [0, 1]],
      ["payRate", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "PayRate")], [0, 1]],
      ["regularMinutesWorked", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "RegularMinutesWorked")], [0, 1]],
      ["startTime", ["DateTimeOffset", XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfBreak,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfBreak"),
    :schema_element => [
      ["v_break", ["Break[]", XSD::QName.new(NsV2, "Break")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => Break,
    :schema_type => XSD::QName.new(NsV2, "Break"),
    :schema_element => [
      ["endTime", ["DateTimeOffset", XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["isPaid", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsPaid")], [0, 1]],
      ["minutes", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Minutes")], [0, 1]],
      ["number", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["startTime", ["DateTimeOffset", XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SaveLaborScheduleRequest,
    :schema_type => XSD::QName.new(NsV2, "SaveLaborScheduleRequest"),
    :schema_element => [
      ["laborSchedule", ["LaborSchedule", XSD::QName.new(NsV2, "LaborSchedule")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SaveLaborScheduleReply,
    :schema_type => XSD::QName.new(NsV2, "SaveLaborScheduleReply"),
    :schema_basetype => XSD::QName.new(NsV2, "LaborWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["jobId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "JobId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => Reply,
    :schema_type => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => DateTimeOffset,
    :schema_type => XSD::QName.new(NsSystem, "DateTimeOffset"),
    :schema_element => [
      ["dateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsSystem, "DateTime")]],
      ["offsetMinutes", ["SOAP::SOAPShort", XSD::QName.new(NsSystem, "OffsetMinutes")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLaborScheduleRequest,
    :schema_type => XSD::QName.new(NsV2, "GetLaborScheduleRequest"),
    :schema_element => [
      ["endDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "EndDate")], [0, 1]],
      ["startDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "StartDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLaborScheduleReply,
    :schema_type => XSD::QName.new(NsV2, "GetLaborScheduleReply"),
    :schema_basetype => XSD::QName.new(NsV2, "LaborWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["laborSchedule", ["LaborSchedule", XSD::QName.new(NsV2, "LaborSchedule")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => LaborWebService2Reply,
    :schema_type => XSD::QName.new(NsV2, "LaborWebService2Reply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => LaborSchedule,
    :schema_type => XSD::QName.new(NsV2, "LaborSchedule"),
    :schema_element => [
      ["days", ["ArrayOfLaborScheduleDay", XSD::QName.new(NsV2, "Days")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfLaborScheduleDay,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfLaborScheduleDay"),
    :schema_element => [
      ["laborScheduleDay", ["LaborScheduleDay[]", XSD::QName.new(NsV2, "LaborScheduleDay")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => LaborScheduleDay,
    :schema_type => XSD::QName.new(NsV2, "LaborScheduleDay"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["shifts", ["ArrayOfScheduledShift", XSD::QName.new(NsV2, "Shifts")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfScheduledShift,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfScheduledShift"),
    :schema_element => [
      ["scheduledShift", ["ScheduledShift[]", XSD::QName.new(NsV2, "ScheduledShift")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ScheduledShift,
    :schema_type => XSD::QName.new(NsV2, "ScheduledShift"),
    :schema_element => [
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["endTime", [nil, XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["jobId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "JobId")], [0, 1]],
      ["startTime", [nil, XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetShiftsRequest,
    :schema_type => XSD::QName.new(NsV2, "GetShiftsRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["modifiedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ModifiedTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetShiftsReply,
    :schema_type => XSD::QName.new(NsV2, "GetShiftsReply"),
    :schema_basetype => XSD::QName.new(NsV2, "LaborWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["shifts", ["ArrayOfShift", XSD::QName.new(NsV2, "Shifts")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfShift,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfShift"),
    :schema_element => [
      ["shift", ["Shift[]", XSD::QName.new(NsV2, "Shift")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Shift,
    :schema_type => XSD::QName.new(NsV2, "Shift"),
    :schema_element => [
      ["breaks", ["ArrayOfBreak", XSD::QName.new(NsV2, "Breaks")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["clockOutBusinessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "ClockOutBusinessDate")], [0, 1]],
      ["declaredTips", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DeclaredTips")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["endTime", ["DateTimeOffset", XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["extendedMinutesWorked", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ExtendedMinutesWorked")], [0, 1]],
      ["id", [nil, XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["jobId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "JobId")], [0, 1]],
      ["minutesWorked", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MinutesWorked")], [0, 1]],
      ["modifiedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ModifiedTime")], [0, 1]],
      ["number", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["overtimeMinutesWorked", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OvertimeMinutesWorked")], [0, 1]],
      ["payRate", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "PayRate")], [0, 1]],
      ["regularMinutesWorked", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "RegularMinutesWorked")], [0, 1]],
      ["startTime", ["DateTimeOffset", XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfBreak,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfBreak"),
    :schema_element => [
      ["v_break", ["Break[]", XSD::QName.new(NsV2, "Break")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Break,
    :schema_type => XSD::QName.new(NsV2, "Break"),
    :schema_element => [
      ["endTime", ["DateTimeOffset", XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["isPaid", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsPaid")], [0, 1]],
      ["minutes", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Minutes")], [0, 1]],
      ["number", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["startTime", ["DateTimeOffset", XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveLaborScheduleRequest,
    :schema_type => XSD::QName.new(NsV2, "SaveLaborScheduleRequest"),
    :schema_element => [
      ["laborSchedule", ["LaborSchedule", XSD::QName.new(NsV2, "LaborSchedule")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveLaborScheduleReply,
    :schema_type => XSD::QName.new(NsV2, "SaveLaborScheduleReply"),
    :schema_basetype => XSD::QName.new(NsV2, "LaborWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["jobId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "JobId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => Reply,
    :schema_type => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => DateTimeOffset,
    :schema_type => XSD::QName.new(NsSystem, "DateTimeOffset"),
    :schema_element => [
      ["dateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsSystem, "DateTime")]],
      ["offsetMinutes", ["SOAP::SOAPShort", XSD::QName.new(NsSystem, "OffsetMinutes")]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLaborSchedule,
    :schema_name => XSD::QName.new(NsV2, "GetLaborSchedule"),
    :schema_element => [
      ["request", "GetLaborScheduleRequest", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLaborScheduleRequest,
    :schema_name => XSD::QName.new(NsV2, "GetLaborScheduleRequest"),
    :schema_element => [
      ["endDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "EndDate")], [0, 1]],
      ["startDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "StartDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLaborScheduleResponse,
    :schema_name => XSD::QName.new(NsV2, "GetLaborScheduleResponse"),
    :schema_element => [
      ["getLaborScheduleResult", ["GetLaborScheduleReply", XSD::QName.new(NsV2, "GetLaborScheduleResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetLaborScheduleReply,
    :schema_name => XSD::QName.new(NsV2, "GetLaborScheduleReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["laborSchedule", ["LaborSchedule", XSD::QName.new(NsV2, "LaborSchedule")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => LaborWebService2Reply,
    :schema_name => XSD::QName.new(NsV2, "LaborWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => LaborSchedule,
    :schema_name => XSD::QName.new(NsV2, "LaborSchedule"),
    :schema_element => [
      ["days", ["ArrayOfLaborScheduleDay", XSD::QName.new(NsV2, "Days")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfLaborScheduleDay,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfLaborScheduleDay"),
    :schema_element => [
      ["laborScheduleDay", ["LaborScheduleDay[]", XSD::QName.new(NsV2, "LaborScheduleDay")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => LaborScheduleDay,
    :schema_name => XSD::QName.new(NsV2, "LaborScheduleDay"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["shifts", ["ArrayOfScheduledShift", XSD::QName.new(NsV2, "Shifts")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfScheduledShift,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfScheduledShift"),
    :schema_element => [
      ["scheduledShift", ["ScheduledShift[]", XSD::QName.new(NsV2, "ScheduledShift")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ScheduledShift,
    :schema_name => XSD::QName.new(NsV2, "ScheduledShift"),
    :schema_element => [
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["endTime", [nil, XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["jobId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "JobId")], [0, 1]],
      ["startTime", [nil, XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetShifts,
    :schema_name => XSD::QName.new(NsV2, "GetShifts"),
    :schema_element => [
      ["request", "GetShiftsRequest", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetShiftsRequest,
    :schema_name => XSD::QName.new(NsV2, "GetShiftsRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["modifiedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ModifiedTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetShiftsResponse,
    :schema_name => XSD::QName.new(NsV2, "GetShiftsResponse"),
    :schema_element => [
      ["getShiftsResult", ["GetShiftsReply", XSD::QName.new(NsV2, "GetShiftsResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetShiftsReply,
    :schema_name => XSD::QName.new(NsV2, "GetShiftsReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["shifts", ["ArrayOfShift", XSD::QName.new(NsV2, "Shifts")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfShift,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfShift"),
    :schema_element => [
      ["shift", ["Shift[]", XSD::QName.new(NsV2, "Shift")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Shift,
    :schema_name => XSD::QName.new(NsV2, "Shift"),
    :schema_element => [
      ["breaks", ["ArrayOfBreak", XSD::QName.new(NsV2, "Breaks")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["clockOutBusinessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "ClockOutBusinessDate")], [0, 1]],
      ["declaredTips", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DeclaredTips")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["endTime", ["DateTimeOffset", XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["extendedMinutesWorked", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ExtendedMinutesWorked")], [0, 1]],
      ["id", [nil, XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["jobId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "JobId")], [0, 1]],
      ["minutesWorked", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MinutesWorked")], [0, 1]],
      ["modifiedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ModifiedTime")], [0, 1]],
      ["number", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["overtimeMinutesWorked", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OvertimeMinutesWorked")], [0, 1]],
      ["payRate", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "PayRate")], [0, 1]],
      ["regularMinutesWorked", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "RegularMinutesWorked")], [0, 1]],
      ["startTime", ["DateTimeOffset", XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfBreak,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfBreak"),
    :schema_element => [
      ["v_break", ["Break[]", XSD::QName.new(NsV2, "Break")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Break,
    :schema_name => XSD::QName.new(NsV2, "Break"),
    :schema_element => [
      ["endTime", ["DateTimeOffset", XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["isPaid", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsPaid")], [0, 1]],
      ["minutes", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Minutes")], [0, 1]],
      ["number", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["startTime", ["DateTimeOffset", XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveLaborSchedule,
    :schema_name => XSD::QName.new(NsV2, "SaveLaborSchedule"),
    :schema_element => [
      ["request", "SaveLaborScheduleRequest", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveLaborScheduleRequest,
    :schema_name => XSD::QName.new(NsV2, "SaveLaborScheduleRequest"),
    :schema_element => [
      ["laborSchedule", ["LaborSchedule", XSD::QName.new(NsV2, "LaborSchedule")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveLaborScheduleResponse,
    :schema_name => XSD::QName.new(NsV2, "SaveLaborScheduleResponse"),
    :schema_element => [
      ["saveLaborScheduleResult", ["SaveLaborScheduleReply", XSD::QName.new(NsV2, "SaveLaborScheduleResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveLaborScheduleReply,
    :schema_name => XSD::QName.new(NsV2, "SaveLaborScheduleReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["jobId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "JobId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => Reply,
    :schema_name => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => DateTimeOffset,
    :schema_name => XSD::QName.new(NsSystem, "DateTimeOffset"),
    :schema_element => [
      ["dateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsSystem, "DateTime")]],
      ["offsetMinutes", ["SOAP::SOAPShort", XSD::QName.new(NsSystem, "OffsetMinutes")]]
    ]
  )
end
