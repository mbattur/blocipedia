# encoding: UTF-8
# Generated by wsdl2ruby (SOAP4R-NG/2.0.3)
require_relative 'SalesWebService2.rb'
require_relative 'SalesWebService2MappingRegistry.rb'
require 'soap/rpc/driver'

class ISalesWebService2 < ::SOAP::RPC::Driver
  DefaultEndpointUrl = "http://api-devapi01.brinkpos.net/Sales2.svc"

  Methods = [
    [ "http://www.brinksoftware.com/webservices/sales/v2/ISalesWebService2/GetCurrentBusinessDate",
      "getCurrentBusinessDate",
      [ [:in, "parameters", ["::SOAP::SOAPElement", "http://www.brinksoftware.com/webservices/sales/v2", "GetCurrentBusinessDate"]],
        [:out, "parameters", ["::SOAP::SOAPElement", "http://www.brinksoftware.com/webservices/sales/v2", "GetCurrentBusinessDateResponse"]] ],
      { :request_style =>  :document, :request_use =>  :literal,
        :response_style => :document, :response_use => :literal,
        :faults => {} }
    ],
    [ "http://www.brinksoftware.com/webservices/sales/v2/ISalesWebService2/GetDeposits",
      "getDeposits",
      [ [:in, "parameters", ["::SOAP::SOAPElement", "http://www.brinksoftware.com/webservices/sales/v2", "GetDeposits"]],
        [:out, "parameters", ["::SOAP::SOAPElement", "http://www.brinksoftware.com/webservices/sales/v2", "GetDepositsResponse"]] ],
      { :request_style =>  :document, :request_use =>  :literal,
        :response_style => :document, :response_use => :literal,
        :faults => {} }
    ],
    [ "http://www.brinksoftware.com/webservices/sales/v2/ISalesWebService2/GetFutureDateOrderDeposits",
      "getFutureDateOrderDeposits",
      [ [:in, "parameters", ["::SOAP::SOAPElement", "http://www.brinksoftware.com/webservices/sales/v2", "GetFutureDateOrderDeposits"]],
        [:out, "parameters", ["::SOAP::SOAPElement", "http://www.brinksoftware.com/webservices/sales/v2", "GetFutureDateOrderDepositsResponse"]] ],
      { :request_style =>  :document, :request_use =>  :literal,
        :response_style => :document, :response_use => :literal,
        :faults => {} }
    ],
    [ "http://www.brinksoftware.com/webservices/sales/v2/ISalesWebService2/GetFutureDateOrders",
      "getFutureDateOrders",
      [ [:in, "parameters", ["::SOAP::SOAPElement", "http://www.brinksoftware.com/webservices/sales/v2", "GetFutureDateOrders"]],
        [:out, "parameters", ["::SOAP::SOAPElement", "http://www.brinksoftware.com/webservices/sales/v2", "GetFutureDateOrdersResponse"]] ],
      { :request_style =>  :document, :request_use =>  :literal,
        :response_style => :document, :response_use => :literal,
        :faults => {} }
    ],
    [ "http://www.brinksoftware.com/webservices/sales/v2/ISalesWebService2/GetOrders",
      "getOrders",
      [ [:in, "parameters", ["::SOAP::SOAPElement", "http://www.brinksoftware.com/webservices/sales/v2", "GetOrders"]],
        [:out, "parameters", ["::SOAP::SOAPElement", "http://www.brinksoftware.com/webservices/sales/v2", "GetOrdersResponse"]] ],
      { :request_style =>  :document, :request_use =>  :literal,
        :response_style => :document, :response_use => :literal,
        :faults => {} }
    ],
    [ "http://www.brinksoftware.com/webservices/sales/v2/ISalesWebService2/GetTills",
      "getTills",
      [ [:in, "parameters", ["::SOAP::SOAPElement", "http://www.brinksoftware.com/webservices/sales/v2", "GetTills"]],
        [:out, "parameters", ["::SOAP::SOAPElement", "http://www.brinksoftware.com/webservices/sales/v2", "GetTillsResponse"]] ],
      { :request_style =>  :document, :request_use =>  :literal,
        :response_style => :document, :response_use => :literal,
        :faults => {} }
    ]
  ]

  def initialize(endpoint_url = nil)
    endpoint_url ||= DefaultEndpointUrl
    super(endpoint_url, nil)
    self.mapping_registry = SalesWebService2MappingRegistry::EncodedRegistry
    self.literal_mapping_registry = SalesWebService2MappingRegistry::LiteralRegistry
    init_methods
  end

private

  def init_methods
    Methods.each do |definitions|
      opt = definitions.last
      if opt[:request_style] == :document
        add_document_operation(*definitions)
      else
        add_rpc_operation(*definitions)
        qname = definitions[0]
        name = definitions[2]
        if qname.name != name and qname.name.capitalize == name.capitalize
          ::SOAP::Mapping.define_singleton_method(self, qname.name) do |*arg|
            __send__(name, *arg)
          end
        end
      end
    end
  end
end

