# encoding: UTF-8
# Generated by wsdl2ruby (SOAP4R-NG/2.0.3)
require_relative 'SalesWebService2.rb'
require 'soap/mapping'

module SalesWebService2MappingRegistry
  EncodedRegistry = ::SOAP::Mapping::EncodedRegistry.new
  LiteralRegistry = ::SOAP::Mapping::LiteralRegistry.new
  NsBrinkFoundation = "http://schemas.datacontract.org/2004/07/Brink.Foundation"
  NsPosWebService = "http://schemas.datacontract.org/2004/07/Pos.Web.Service"
  NsSystem = "http://schemas.datacontract.org/2004/07/System"
  NsV2 = "http://www.brinksoftware.com/webservices/sales/v2"

  EncodedRegistry.register(
    :class => GetCurrentBusinessDateReply,
    :schema_type => XSD::QName.new(NsV2, "GetCurrentBusinessDateReply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetDepositsRequest,
    :schema_type => XSD::QName.new(NsV2, "GetDepositsRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetDepositsReply,
    :schema_type => XSD::QName.new(NsV2, "GetDepositsReply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["deposits", ["ArrayOfDeposit", XSD::QName.new(NsV2, "Deposits")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfDeposit,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfDeposit"),
    :schema_element => [
      ["deposit", ["Deposit[]", XSD::QName.new(NsV2, "Deposit")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => Deposit,
    :schema_type => XSD::QName.new(NsV2, "Deposit"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["bag", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Bag")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["depositTypeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DepositTypeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["notes", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Notes")], [0, 1]],
      ["number", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["time", ["DateTimeOffset", XSD::QName.new(NsV2, "Time")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetFutureDateOrderDepositsRequest,
    :schema_type => XSD::QName.new(NsV2, "GetFutureDateOrderDepositsRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetFutureDateOrderDepositsReply,
    :schema_type => XSD::QName.new(NsV2, "GetFutureDateOrderDepositsReply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["deposits", ["ArrayOfFutureDateOrderDeposit", XSD::QName.new(NsV2, "Deposits")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfFutureDateOrderDeposit,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfFutureDateOrderDeposit"),
    :schema_element => [
      ["futureDateOrderDeposit", ["FutureDateOrderDeposit[]", XSD::QName.new(NsV2, "FutureDateOrderDeposit")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => FutureDateOrderDeposit,
    :schema_type => XSD::QName.new(NsV2, "FutureDateOrderDeposit"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["authCode", ["SOAP::SOAPString", XSD::QName.new(NsV2, "AuthCode")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["cardHolderName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardHolderName")], [0, 1]],
      ["cardNumber", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardNumber")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["merchantAccountType", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MerchantAccountType")], [0, 1]],
      ["orderId", ["SOAP::SOAPLong", XSD::QName.new(NsV2, "OrderId")], [0, 1]],
      ["orderTotal", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "OrderTotal")], [0, 1]],
      ["paymentId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PaymentId")], [0, 1]],
      ["sectionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SectionId")], [0, 1]],
      ["tenderId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TenderId")], [0, 1]],
      ["tillNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TillNumber")], [0, 1]],
      ["time", ["DateTimeOffset", XSD::QName.new(NsV2, "Time")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetFutureDateOrdersRequest,
    :schema_type => XSD::QName.new(NsV2, "GetFutureDateOrdersRequest"),
    :schema_element => [
      ["futureDateRange", ["DateRange", XSD::QName.new(NsV2, "FutureDateRange")], [0, 1]],
      ["priceRollUp", ["SOAP::SOAPString", XSD::QName.new(NsV2, "PriceRollUp")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetFutureDateOrdersReply,
    :schema_type => XSD::QName.new(NsV2, "GetFutureDateOrdersReply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["futureDateOrders", ["ArrayOfOrder", XSD::QName.new(NsV2, "FutureDateOrders")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOrder,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrder"),
    :schema_element => [
      ["order", ["Order[]", XSD::QName.new(NsV2, "Order")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => Order,
    :schema_type => XSD::QName.new(NsV2, "Order"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["closedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ClosedTime")], [0, 1]],
      ["count", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Count")], [0, 1]],
      ["customerId", [nil, XSD::QName.new(NsV2, "CustomerId")], [0, 1]],
      ["deposits", ["ArrayOfOrderDeposit", XSD::QName.new(NsV2, "Deposits")], [0, 1]],
      ["destinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DestinationId")], [0, 1]],
      ["discounts", ["ArrayOfOrderDiscount", XSD::QName.new(NsV2, "Discounts")], [0, 1]],
      ["displaySubtotal", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DisplaySubtotal")], [0, 1]],
      ["displayTax", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DisplayTax")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["entries", ["ArrayOfOrderEntry", XSD::QName.new(NsV2, "Entries")], [0, 1]],
      ["firstSendTime", ["DateTimeOffset", XSD::QName.new(NsV2, "FirstSendTime")], [0, 1]],
      ["grossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "GrossSales")], [0, 1]],
      ["guestCount", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "GuestCount")], [0, 1]],
      ["guestCountFractional", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "GuestCountFractional")], [0, 1]],
      ["id", ["SOAP::SOAPLong", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["idEncoded", ["SOAP::SOAPString", XSD::QName.new(NsV2, "IdEncoded")], [0, 1]],
      ["idNoLocation", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "IdNoLocation")], [0, 1]],
      ["isClosed", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsClosed")], [0, 1]],
      ["isFutureOrder", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsFutureOrder")], [0, 1]],
      ["isRefund", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsRefund")], [0, 1]],
      ["isTaxExempt", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsTaxExempt")], [0, 1]],
      ["modifiedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ModifiedTime")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["netSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "NetSales")], [0, 1]],
      ["openedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "OpenedTime")], [0, 1]],
      ["payments", ["ArrayOfOrderPayment", XSD::QName.new(NsV2, "Payments")], [0, 1]],
      ["pickupTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "PickupTime")], [0, 1]],
      ["promotions", ["ArrayOfOrderPromotion", XSD::QName.new(NsV2, "Promotions")], [0, 1]],
      ["rounding", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Rounding")], [0, 1]],
      ["sectionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SectionId")], [0, 1]],
      ["subtotal", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Subtotal")], [0, 1]],
      ["surcharges", ["ArrayOfOrderSurcharge", XSD::QName.new(NsV2, "Surcharges")], [0, 1]],
      ["tax", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Tax")], [0, 1]],
      ["taxExemptId", ["SOAP::SOAPString", XSD::QName.new(NsV2, "TaxExemptId")], [0, 1]],
      ["terminalId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TerminalId")], [0, 1]],
      ["tillNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TillNumber")], [0, 1]],
      ["total", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Total")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOrderDeposit,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderDeposit"),
    :schema_element => [
      ["orderDeposit", ["OrderDeposit[]", XSD::QName.new(NsV2, "OrderDeposit")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderDeposit,
    :schema_type => XSD::QName.new(NsV2, "OrderDeposit"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["isApplied", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsApplied")], [0, 1]],
      ["isDeleted", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeleted")], [0, 1]],
      ["isReversal", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsReversal")], [0, 1]],
      ["originalOrderDepositId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OriginalOrderDepositId")], [0, 1]],
      ["paymentId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PaymentId")], [0, 1]],
      ["tenderId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TenderId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOrderDiscount,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderDiscount"),
    :schema_element => [
      ["orderDiscount", ["OrderDiscount[]", XSD::QName.new(NsV2, "OrderDiscount")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderDiscount,
    :schema_type => XSD::QName.new(NsV2, "OrderDiscount"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["approverEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ApproverEmployeeId")], [0, 1]],
      ["discountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DiscountId")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["loyaltyRewardId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "LoyaltyRewardId")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["source", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Source")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOrderEntry,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderEntry"),
    :schema_element => [
      ["orderEntry", ["OrderEntry[]", XSD::QName.new(NsV2, "OrderEntry")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderEntry,
    :schema_type => XSD::QName.new(NsV2, "OrderEntry"),
    :schema_element => [
      ["dayPartId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DayPartId")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["promotions", ["ArrayOfOrderEntryPromotion", XSD::QName.new(NsV2, "Promotions")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOrderEntryPromotion,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderEntryPromotion"),
    :schema_element => [
      ["orderEntryPromotion", ["OrderEntryPromotion[]", XSD::QName.new(NsV2, "OrderEntryPromotion")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderEntryPromotion,
    :schema_type => XSD::QName.new(NsV2, "OrderEntryPromotion"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["orderPromotionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OrderPromotionId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderItem,
    :schema_type => XSD::QName.new(NsV2, "OrderItem"),
    :schema_basetype => XSD::QName.new(NsV2, "OrderEntry"),
    :schema_element => [
      ["dayPartId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DayPartId")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["promotions", ["ArrayOfOrderEntryPromotion", XSD::QName.new(NsV2, "Promotions")], [0, 1]],
      ["compositeOrderItemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "CompositeOrderItemId")], [0, 1]],
      ["denominator", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Denominator")], [0, 1]],
      ["destinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DestinationId")], [0, 1]],
      ["discounts", ["ArrayOfOrderItemDiscount", XSD::QName.new(NsV2, "Discounts")], [0, 1]],
      ["displayPrice", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DisplayPrice")], [0, 1]],
      ["grossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "GrossSales")], [0, 1]],
      ["isCleared", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsCleared")], [0, 1]],
      ["isDeleted", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeleted")], [0, 1]],
      ["isVoided", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsVoided")], [0, 1]],
      ["itemGrossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "ItemGrossSales")], [0, 1]],
      ["itemNetSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "ItemNetSales")], [0, 1]],
      ["modifiers", ["ArrayOfOrderItemModifier", XSD::QName.new(NsV2, "Modifiers")], [0, 1]],
      ["netSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "NetSales")], [0, 1]],
      ["note", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Note")], [0, 1]],
      ["splitItemId", ["SOAP::SOAPShort", XSD::QName.new(NsV2, "SplitItemId")], [0, 1]],
      ["taxes", ["ArrayOfOrderEntryTax", XSD::QName.new(NsV2, "Taxes")], [0, 1]],
      ["void", ["OrderItemVoid", XSD::QName.new(NsV2, "Void")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOrderItemDiscount,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderItemDiscount"),
    :schema_element => [
      ["orderItemDiscount", ["OrderItemDiscount[]", XSD::QName.new(NsV2, "OrderItemDiscount")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderItemDiscount,
    :schema_type => XSD::QName.new(NsV2, "OrderItemDiscount"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["orderDiscountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OrderDiscountId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOrderItemModifier,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderItemModifier"),
    :schema_element => [
      ["orderItemModifier", ["OrderItemModifier[]", XSD::QName.new(NsV2, "OrderItemModifier")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderItemModifier,
    :schema_type => XSD::QName.new(NsV2, "OrderItemModifier"),
    :schema_element => [
      ["displayPrice", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DisplayPrice")], [0, 1]],
      ["grossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "GrossSales")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemGrossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "ItemGrossSales")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["itemNetSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "ItemNetSales")], [0, 1]],
      ["modifierCodeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ModifierCodeId")], [0, 1]],
      ["modifierGroupId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ModifierGroupId")], [0, 1]],
      ["modifiers", ["ArrayOfOrderItemModifier", XSD::QName.new(NsV2, "Modifiers")], [0, 1]],
      ["netSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "NetSales")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["taxes", ["ArrayOfOrderEntryTax", XSD::QName.new(NsV2, "Taxes")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOrderEntryTax,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderEntryTax"),
    :schema_element => [
      ["orderEntryTax", ["OrderEntryTax[]", XSD::QName.new(NsV2, "OrderEntryTax")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderEntryTax,
    :schema_type => XSD::QName.new(NsV2, "OrderEntryTax"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["isInclusive", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsInclusive")], [0, 1]],
      ["taxId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TaxId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderItemVoid,
    :schema_type => XSD::QName.new(NsV2, "OrderItemVoid"),
    :schema_element => [
      ["approverEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ApproverEmployeeId")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["time", ["DateTimeOffset", XSD::QName.new(NsV2, "Time")], [0, 1]],
      ["voidReasonId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "VoidReasonId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderGiftCard,
    :schema_type => XSD::QName.new(NsV2, "OrderGiftCard"),
    :schema_basetype => XSD::QName.new(NsV2, "OrderEntry"),
    :schema_element => [
      ["dayPartId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DayPartId")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["promotions", ["ArrayOfOrderEntryPromotion", XSD::QName.new(NsV2, "Promotions")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOrderPayment,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderPayment"),
    :schema_element => [
      ["orderPayment", ["OrderPayment[]", XSD::QName.new(NsV2, "OrderPayment")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderPayment,
    :schema_type => XSD::QName.new(NsV2, "OrderPayment"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["cardHolderName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardHolderName")], [0, 1]],
      ["cardNumber", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardNumber")], [0, 1]],
      ["change", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Change")], [0, 1]],
      ["creditCardTransactionInformation", ["CreditCardTransactionInformation", XSD::QName.new(NsV2, "CreditCardTransactionInformation")], [0, 1]],
      ["details", ["ArrayOfOrderPaymentDetail", XSD::QName.new(NsV2, "Details")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["isDeleted", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeleted")], [0, 1]],
      ["merchantAccountType", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MerchantAccountType")], [0, 1]],
      ["tenderId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TenderId")], [0, 1]],
      ["tillNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TillNumber")], [0, 1]],
      ["tipAmount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "TipAmount")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => CreditCardTransactionInformation,
    :schema_type => XSD::QName.new(NsV2, "CreditCardTransactionInformation"),
    :schema_element => [
      ["authorizationCode", ["SOAP::SOAPString", XSD::QName.new(NsV2, "AuthorizationCode")], [0, 1]],
      ["cardToken", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardToken")], [0, 1]],
      ["clientTransactionIdentifier", ["SOAP::SOAPString", XSD::QName.new(NsV2, "ClientTransactionIdentifier")], [0, 1]],
      ["result", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Result")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOrderPaymentDetail,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderPaymentDetail"),
    :schema_element => [
      ["orderPaymentDetail", ["OrderPaymentDetail[]", XSD::QName.new(NsV2, "OrderPaymentDetail")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderPaymentDetail,
    :schema_type => XSD::QName.new(NsV2, "OrderPaymentDetail"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["tillNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TillNumber")], [0, 1]],
      ["tipAmount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "TipAmount")], [0, 1]],
      ["type", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Type")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOrderPromotion,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderPromotion"),
    :schema_element => [
      ["orderPromotion", ["OrderPromotion[]", XSD::QName.new(NsV2, "OrderPromotion")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderPromotion,
    :schema_type => XSD::QName.new(NsV2, "OrderPromotion"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["approverEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ApproverEmployeeId")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["promotionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PromotionId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOrderSurcharge,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderSurcharge"),
    :schema_element => [
      ["orderSurcharge", ["OrderSurcharge[]", XSD::QName.new(NsV2, "OrderSurcharge")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OrderSurcharge,
    :schema_type => XSD::QName.new(NsV2, "OrderSurcharge"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["approverEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ApproverEmployeeId")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["isSystemApplied", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsSystemApplied")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["surchargeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SurchargeId")], [0, 1]],
      ["taxes", ["ArrayOfOrderEntryTax", XSD::QName.new(NsV2, "Taxes")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetOrdersRequest,
    :schema_type => XSD::QName.new(NsV2, "GetOrdersRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["excludeOpenOrders", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ExcludeOpenOrders")], [0, 1]],
      ["modifiedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ModifiedTime")], [0, 1]],
      ["priceRollUp", ["SOAP::SOAPString", XSD::QName.new(NsV2, "PriceRollUp")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetOrdersReply,
    :schema_type => XSD::QName.new(NsV2, "GetOrdersReply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["orders", ["ArrayOfOrder", XSD::QName.new(NsV2, "Orders")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetTillsRequest,
    :schema_type => XSD::QName.new(NsV2, "GetTillsRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetTillsReply,
    :schema_type => XSD::QName.new(NsV2, "GetTillsReply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["tills", ["ArrayOfTill", XSD::QName.new(NsV2, "Tills")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfTill,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfTill"),
    :schema_element => [
      ["till", ["Till[]", XSD::QName.new(NsV2, "Till")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => Till,
    :schema_type => XSD::QName.new(NsV2, "Till"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["cashDrawerId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "CashDrawerId")], [0, 1]],
      ["closedByEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ClosedByEmployeeId")], [0, 1]],
      ["closedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ClosedTime")], [0, 1]],
      ["declaredCash", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DeclaredCash")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["isClosed", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsClosed")], [0, 1]],
      ["isPublic", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsPublic")], [0, 1]],
      ["isVirtual", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsVirtual")], [0, 1]],
      ["number", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["openedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "OpenedTime")], [0, 1]],
      ["overShort", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "OverShort")], [0, 1]],
      ["paidInOuts", ["ArrayOfPaidInOut", XSD::QName.new(NsV2, "PaidInOuts")], [0, 1]],
      ["startingBank", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "StartingBank")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfPaidInOut,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfPaidInOut"),
    :schema_element => [
      ["paidInOut", ["PaidInOut[]", XSD::QName.new(NsV2, "PaidInOut")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => PaidInOut,
    :schema_type => XSD::QName.new(NsV2, "PaidInOut"),
    :schema_element => [
      ["accountType", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "AccountType")], [0, 1]],
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["number", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["pettyAccountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PettyAccountId")], [0, 1]],
      ["time", ["DateTimeOffset", XSD::QName.new(NsV2, "Time")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => Reply,
    :schema_type => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => DateTimeOffset,
    :schema_type => XSD::QName.new(NsSystem, "DateTimeOffset"),
    :schema_element => [
      ["dateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsSystem, "DateTime")]],
      ["offsetMinutes", ["SOAP::SOAPShort", XSD::QName.new(NsSystem, "OffsetMinutes")]]
    ]
  )

  EncodedRegistry.register(
    :class => DateRange,
    :schema_type => XSD::QName.new(NsBrinkFoundation, "DateRange"),
    :schema_element => [
      ["v_end", ["SOAP::SOAPDateTime", XSD::QName.new(NsBrinkFoundation, "End")], [0, 1]],
      ["start", ["SOAP::SOAPDateTime", XSD::QName.new(NsBrinkFoundation, "Start")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCurrentBusinessDateReply,
    :schema_type => XSD::QName.new(NsV2, "GetCurrentBusinessDateReply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDepositsRequest,
    :schema_type => XSD::QName.new(NsV2, "GetDepositsRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDepositsReply,
    :schema_type => XSD::QName.new(NsV2, "GetDepositsReply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["deposits", ["ArrayOfDeposit", XSD::QName.new(NsV2, "Deposits")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfDeposit,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfDeposit"),
    :schema_element => [
      ["deposit", ["Deposit[]", XSD::QName.new(NsV2, "Deposit")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Deposit,
    :schema_type => XSD::QName.new(NsV2, "Deposit"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["bag", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Bag")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["depositTypeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DepositTypeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["notes", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Notes")], [0, 1]],
      ["number", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["time", ["DateTimeOffset", XSD::QName.new(NsV2, "Time")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureDateOrderDepositsRequest,
    :schema_type => XSD::QName.new(NsV2, "GetFutureDateOrderDepositsRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureDateOrderDepositsReply,
    :schema_type => XSD::QName.new(NsV2, "GetFutureDateOrderDepositsReply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["deposits", ["ArrayOfFutureDateOrderDeposit", XSD::QName.new(NsV2, "Deposits")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfFutureDateOrderDeposit,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfFutureDateOrderDeposit"),
    :schema_element => [
      ["futureDateOrderDeposit", ["FutureDateOrderDeposit[]", XSD::QName.new(NsV2, "FutureDateOrderDeposit")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FutureDateOrderDeposit,
    :schema_type => XSD::QName.new(NsV2, "FutureDateOrderDeposit"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["authCode", ["SOAP::SOAPString", XSD::QName.new(NsV2, "AuthCode")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["cardHolderName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardHolderName")], [0, 1]],
      ["cardNumber", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardNumber")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["merchantAccountType", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MerchantAccountType")], [0, 1]],
      ["orderId", ["SOAP::SOAPLong", XSD::QName.new(NsV2, "OrderId")], [0, 1]],
      ["orderTotal", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "OrderTotal")], [0, 1]],
      ["paymentId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PaymentId")], [0, 1]],
      ["sectionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SectionId")], [0, 1]],
      ["tenderId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TenderId")], [0, 1]],
      ["tillNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TillNumber")], [0, 1]],
      ["time", ["DateTimeOffset", XSD::QName.new(NsV2, "Time")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureDateOrdersRequest,
    :schema_type => XSD::QName.new(NsV2, "GetFutureDateOrdersRequest"),
    :schema_element => [
      ["futureDateRange", ["DateRange", XSD::QName.new(NsV2, "FutureDateRange")], [0, 1]],
      ["priceRollUp", ["SOAP::SOAPString", XSD::QName.new(NsV2, "PriceRollUp")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureDateOrdersReply,
    :schema_type => XSD::QName.new(NsV2, "GetFutureDateOrdersReply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["futureDateOrders", ["ArrayOfOrder", XSD::QName.new(NsV2, "FutureDateOrders")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrder,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrder"),
    :schema_element => [
      ["order", ["Order[]", XSD::QName.new(NsV2, "Order")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Order,
    :schema_type => XSD::QName.new(NsV2, "Order"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["closedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ClosedTime")], [0, 1]],
      ["count", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Count")], [0, 1]],
      ["customerId", [nil, XSD::QName.new(NsV2, "CustomerId")], [0, 1]],
      ["deposits", ["ArrayOfOrderDeposit", XSD::QName.new(NsV2, "Deposits")], [0, 1]],
      ["destinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DestinationId")], [0, 1]],
      ["discounts", ["ArrayOfOrderDiscount", XSD::QName.new(NsV2, "Discounts")], [0, 1]],
      ["displaySubtotal", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DisplaySubtotal")], [0, 1]],
      ["displayTax", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DisplayTax")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["entries", ["ArrayOfOrderEntry", XSD::QName.new(NsV2, "Entries")], [0, 1]],
      ["firstSendTime", ["DateTimeOffset", XSD::QName.new(NsV2, "FirstSendTime")], [0, 1]],
      ["grossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "GrossSales")], [0, 1]],
      ["guestCount", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "GuestCount")], [0, 1]],
      ["guestCountFractional", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "GuestCountFractional")], [0, 1]],
      ["id", ["SOAP::SOAPLong", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["idEncoded", ["SOAP::SOAPString", XSD::QName.new(NsV2, "IdEncoded")], [0, 1]],
      ["idNoLocation", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "IdNoLocation")], [0, 1]],
      ["isClosed", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsClosed")], [0, 1]],
      ["isFutureOrder", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsFutureOrder")], [0, 1]],
      ["isRefund", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsRefund")], [0, 1]],
      ["isTaxExempt", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsTaxExempt")], [0, 1]],
      ["modifiedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ModifiedTime")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["netSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "NetSales")], [0, 1]],
      ["openedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "OpenedTime")], [0, 1]],
      ["payments", ["ArrayOfOrderPayment", XSD::QName.new(NsV2, "Payments")], [0, 1]],
      ["pickupTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "PickupTime")], [0, 1]],
      ["promotions", ["ArrayOfOrderPromotion", XSD::QName.new(NsV2, "Promotions")], [0, 1]],
      ["rounding", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Rounding")], [0, 1]],
      ["sectionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SectionId")], [0, 1]],
      ["subtotal", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Subtotal")], [0, 1]],
      ["surcharges", ["ArrayOfOrderSurcharge", XSD::QName.new(NsV2, "Surcharges")], [0, 1]],
      ["tax", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Tax")], [0, 1]],
      ["taxExemptId", ["SOAP::SOAPString", XSD::QName.new(NsV2, "TaxExemptId")], [0, 1]],
      ["terminalId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TerminalId")], [0, 1]],
      ["tillNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TillNumber")], [0, 1]],
      ["total", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Total")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderDeposit,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderDeposit"),
    :schema_element => [
      ["orderDeposit", ["OrderDeposit[]", XSD::QName.new(NsV2, "OrderDeposit")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderDeposit,
    :schema_type => XSD::QName.new(NsV2, "OrderDeposit"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["isApplied", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsApplied")], [0, 1]],
      ["isDeleted", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeleted")], [0, 1]],
      ["isReversal", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsReversal")], [0, 1]],
      ["originalOrderDepositId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OriginalOrderDepositId")], [0, 1]],
      ["paymentId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PaymentId")], [0, 1]],
      ["tenderId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TenderId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderDiscount,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderDiscount"),
    :schema_element => [
      ["orderDiscount", ["OrderDiscount[]", XSD::QName.new(NsV2, "OrderDiscount")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderDiscount,
    :schema_type => XSD::QName.new(NsV2, "OrderDiscount"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["approverEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ApproverEmployeeId")], [0, 1]],
      ["discountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DiscountId")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["loyaltyRewardId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "LoyaltyRewardId")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["source", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Source")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderEntry,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderEntry"),
    :schema_element => [
      ["orderEntry", ["OrderEntry[]", XSD::QName.new(NsV2, "OrderEntry")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderEntry,
    :schema_type => XSD::QName.new(NsV2, "OrderEntry"),
    :schema_element => [
      ["dayPartId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DayPartId")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["promotions", ["ArrayOfOrderEntryPromotion", XSD::QName.new(NsV2, "Promotions")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderEntryPromotion,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderEntryPromotion"),
    :schema_element => [
      ["orderEntryPromotion", ["OrderEntryPromotion[]", XSD::QName.new(NsV2, "OrderEntryPromotion")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderEntryPromotion,
    :schema_type => XSD::QName.new(NsV2, "OrderEntryPromotion"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["orderPromotionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OrderPromotionId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderItem,
    :schema_type => XSD::QName.new(NsV2, "OrderItem"),
    :schema_basetype => XSD::QName.new(NsV2, "OrderEntry"),
    :schema_element => [
      ["dayPartId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DayPartId")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["promotions", ["ArrayOfOrderEntryPromotion", XSD::QName.new(NsV2, "Promotions")], [0, 1]],
      ["compositeOrderItemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "CompositeOrderItemId")], [0, 1]],
      ["denominator", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Denominator")], [0, 1]],
      ["destinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DestinationId")], [0, 1]],
      ["discounts", ["ArrayOfOrderItemDiscount", XSD::QName.new(NsV2, "Discounts")], [0, 1]],
      ["displayPrice", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DisplayPrice")], [0, 1]],
      ["grossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "GrossSales")], [0, 1]],
      ["isCleared", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsCleared")], [0, 1]],
      ["isDeleted", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeleted")], [0, 1]],
      ["isVoided", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsVoided")], [0, 1]],
      ["itemGrossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "ItemGrossSales")], [0, 1]],
      ["itemNetSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "ItemNetSales")], [0, 1]],
      ["modifiers", ["ArrayOfOrderItemModifier", XSD::QName.new(NsV2, "Modifiers")], [0, 1]],
      ["netSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "NetSales")], [0, 1]],
      ["note", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Note")], [0, 1]],
      ["splitItemId", ["SOAP::SOAPShort", XSD::QName.new(NsV2, "SplitItemId")], [0, 1]],
      ["taxes", ["ArrayOfOrderEntryTax", XSD::QName.new(NsV2, "Taxes")], [0, 1]],
      ["void", ["OrderItemVoid", XSD::QName.new(NsV2, "Void")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderItemDiscount,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderItemDiscount"),
    :schema_element => [
      ["orderItemDiscount", ["OrderItemDiscount[]", XSD::QName.new(NsV2, "OrderItemDiscount")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderItemDiscount,
    :schema_type => XSD::QName.new(NsV2, "OrderItemDiscount"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["orderDiscountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OrderDiscountId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderItemModifier,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderItemModifier"),
    :schema_element => [
      ["orderItemModifier", ["OrderItemModifier[]", XSD::QName.new(NsV2, "OrderItemModifier")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderItemModifier,
    :schema_type => XSD::QName.new(NsV2, "OrderItemModifier"),
    :schema_element => [
      ["displayPrice", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DisplayPrice")], [0, 1]],
      ["grossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "GrossSales")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemGrossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "ItemGrossSales")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["itemNetSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "ItemNetSales")], [0, 1]],
      ["modifierCodeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ModifierCodeId")], [0, 1]],
      ["modifierGroupId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ModifierGroupId")], [0, 1]],
      ["modifiers", ["ArrayOfOrderItemModifier", XSD::QName.new(NsV2, "Modifiers")], [0, 1]],
      ["netSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "NetSales")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["taxes", ["ArrayOfOrderEntryTax", XSD::QName.new(NsV2, "Taxes")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderEntryTax,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderEntryTax"),
    :schema_element => [
      ["orderEntryTax", ["OrderEntryTax[]", XSD::QName.new(NsV2, "OrderEntryTax")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderEntryTax,
    :schema_type => XSD::QName.new(NsV2, "OrderEntryTax"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["isInclusive", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsInclusive")], [0, 1]],
      ["taxId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TaxId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderItemVoid,
    :schema_type => XSD::QName.new(NsV2, "OrderItemVoid"),
    :schema_element => [
      ["approverEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ApproverEmployeeId")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["time", ["DateTimeOffset", XSD::QName.new(NsV2, "Time")], [0, 1]],
      ["voidReasonId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "VoidReasonId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderGiftCard,
    :schema_type => XSD::QName.new(NsV2, "OrderGiftCard"),
    :schema_basetype => XSD::QName.new(NsV2, "OrderEntry"),
    :schema_element => [
      ["dayPartId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DayPartId")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["promotions", ["ArrayOfOrderEntryPromotion", XSD::QName.new(NsV2, "Promotions")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderPayment,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderPayment"),
    :schema_element => [
      ["orderPayment", ["OrderPayment[]", XSD::QName.new(NsV2, "OrderPayment")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderPayment,
    :schema_type => XSD::QName.new(NsV2, "OrderPayment"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["cardHolderName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardHolderName")], [0, 1]],
      ["cardNumber", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardNumber")], [0, 1]],
      ["change", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Change")], [0, 1]],
      ["creditCardTransactionInformation", ["CreditCardTransactionInformation", XSD::QName.new(NsV2, "CreditCardTransactionInformation")], [0, 1]],
      ["details", ["ArrayOfOrderPaymentDetail", XSD::QName.new(NsV2, "Details")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["isDeleted", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeleted")], [0, 1]],
      ["merchantAccountType", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MerchantAccountType")], [0, 1]],
      ["tenderId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TenderId")], [0, 1]],
      ["tillNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TillNumber")], [0, 1]],
      ["tipAmount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "TipAmount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => CreditCardTransactionInformation,
    :schema_type => XSD::QName.new(NsV2, "CreditCardTransactionInformation"),
    :schema_element => [
      ["authorizationCode", ["SOAP::SOAPString", XSD::QName.new(NsV2, "AuthorizationCode")], [0, 1]],
      ["cardToken", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardToken")], [0, 1]],
      ["clientTransactionIdentifier", ["SOAP::SOAPString", XSD::QName.new(NsV2, "ClientTransactionIdentifier")], [0, 1]],
      ["result", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Result")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderPaymentDetail,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderPaymentDetail"),
    :schema_element => [
      ["orderPaymentDetail", ["OrderPaymentDetail[]", XSD::QName.new(NsV2, "OrderPaymentDetail")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderPaymentDetail,
    :schema_type => XSD::QName.new(NsV2, "OrderPaymentDetail"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["tillNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TillNumber")], [0, 1]],
      ["tipAmount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "TipAmount")], [0, 1]],
      ["type", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Type")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderPromotion,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderPromotion"),
    :schema_element => [
      ["orderPromotion", ["OrderPromotion[]", XSD::QName.new(NsV2, "OrderPromotion")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderPromotion,
    :schema_type => XSD::QName.new(NsV2, "OrderPromotion"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["approverEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ApproverEmployeeId")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["promotionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PromotionId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderSurcharge,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOrderSurcharge"),
    :schema_element => [
      ["orderSurcharge", ["OrderSurcharge[]", XSD::QName.new(NsV2, "OrderSurcharge")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderSurcharge,
    :schema_type => XSD::QName.new(NsV2, "OrderSurcharge"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["approverEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ApproverEmployeeId")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["isSystemApplied", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsSystemApplied")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["surchargeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SurchargeId")], [0, 1]],
      ["taxes", ["ArrayOfOrderEntryTax", XSD::QName.new(NsV2, "Taxes")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrdersRequest,
    :schema_type => XSD::QName.new(NsV2, "GetOrdersRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["excludeOpenOrders", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ExcludeOpenOrders")], [0, 1]],
      ["modifiedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ModifiedTime")], [0, 1]],
      ["priceRollUp", ["SOAP::SOAPString", XSD::QName.new(NsV2, "PriceRollUp")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrdersReply,
    :schema_type => XSD::QName.new(NsV2, "GetOrdersReply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["orders", ["ArrayOfOrder", XSD::QName.new(NsV2, "Orders")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTillsRequest,
    :schema_type => XSD::QName.new(NsV2, "GetTillsRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTillsReply,
    :schema_type => XSD::QName.new(NsV2, "GetTillsReply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["tills", ["ArrayOfTill", XSD::QName.new(NsV2, "Tills")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfTill,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfTill"),
    :schema_element => [
      ["till", ["Till[]", XSD::QName.new(NsV2, "Till")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Till,
    :schema_type => XSD::QName.new(NsV2, "Till"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["cashDrawerId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "CashDrawerId")], [0, 1]],
      ["closedByEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ClosedByEmployeeId")], [0, 1]],
      ["closedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ClosedTime")], [0, 1]],
      ["declaredCash", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DeclaredCash")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["isClosed", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsClosed")], [0, 1]],
      ["isPublic", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsPublic")], [0, 1]],
      ["isVirtual", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsVirtual")], [0, 1]],
      ["number", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["openedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "OpenedTime")], [0, 1]],
      ["overShort", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "OverShort")], [0, 1]],
      ["paidInOuts", ["ArrayOfPaidInOut", XSD::QName.new(NsV2, "PaidInOuts")], [0, 1]],
      ["startingBank", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "StartingBank")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfPaidInOut,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfPaidInOut"),
    :schema_element => [
      ["paidInOut", ["PaidInOut[]", XSD::QName.new(NsV2, "PaidInOut")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => PaidInOut,
    :schema_type => XSD::QName.new(NsV2, "PaidInOut"),
    :schema_element => [
      ["accountType", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "AccountType")], [0, 1]],
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["number", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["pettyAccountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PettyAccountId")], [0, 1]],
      ["time", ["DateTimeOffset", XSD::QName.new(NsV2, "Time")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => Reply,
    :schema_type => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => DateTimeOffset,
    :schema_type => XSD::QName.new(NsSystem, "DateTimeOffset"),
    :schema_element => [
      ["dateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsSystem, "DateTime")]],
      ["offsetMinutes", ["SOAP::SOAPShort", XSD::QName.new(NsSystem, "OffsetMinutes")]]
    ]
  )

  LiteralRegistry.register(
    :class => DateRange,
    :schema_type => XSD::QName.new(NsBrinkFoundation, "DateRange"),
    :schema_element => [
      ["v_end", ["SOAP::SOAPDateTime", XSD::QName.new(NsBrinkFoundation, "End")], [0, 1]],
      ["start", ["SOAP::SOAPDateTime", XSD::QName.new(NsBrinkFoundation, "Start")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCurrentBusinessDate,
    :schema_name => XSD::QName.new(NsV2, "GetCurrentBusinessDate"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => GetCurrentBusinessDateResponse,
    :schema_name => XSD::QName.new(NsV2, "GetCurrentBusinessDateResponse"),
    :schema_element => [
      ["getCurrentBusinessDateResult", ["GetCurrentBusinessDateReply", XSD::QName.new(NsV2, "GetCurrentBusinessDateResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetCurrentBusinessDateReply,
    :schema_name => XSD::QName.new(NsV2, "GetCurrentBusinessDateReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDeposits,
    :schema_name => XSD::QName.new(NsV2, "GetDeposits"),
    :schema_element => [
      ["request", "GetDepositsRequest", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDepositsRequest,
    :schema_name => XSD::QName.new(NsV2, "GetDepositsRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDepositsResponse,
    :schema_name => XSD::QName.new(NsV2, "GetDepositsResponse"),
    :schema_element => [
      ["getDepositsResult", ["GetDepositsReply", XSD::QName.new(NsV2, "GetDepositsResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetDepositsReply,
    :schema_name => XSD::QName.new(NsV2, "GetDepositsReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["deposits", ["ArrayOfDeposit", XSD::QName.new(NsV2, "Deposits")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfDeposit,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfDeposit"),
    :schema_element => [
      ["deposit", ["Deposit[]", XSD::QName.new(NsV2, "Deposit")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Deposit,
    :schema_name => XSD::QName.new(NsV2, "Deposit"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["bag", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Bag")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["depositTypeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DepositTypeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["notes", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Notes")], [0, 1]],
      ["number", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["time", ["DateTimeOffset", XSD::QName.new(NsV2, "Time")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureDateOrderDeposits,
    :schema_name => XSD::QName.new(NsV2, "GetFutureDateOrderDeposits"),
    :schema_element => [
      ["request", "GetFutureDateOrderDepositsRequest", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureDateOrderDepositsRequest,
    :schema_name => XSD::QName.new(NsV2, "GetFutureDateOrderDepositsRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureDateOrderDepositsResponse,
    :schema_name => XSD::QName.new(NsV2, "GetFutureDateOrderDepositsResponse"),
    :schema_element => [
      ["getFutureDateOrderDepositsResult", ["GetFutureDateOrderDepositsReply", XSD::QName.new(NsV2, "GetFutureDateOrderDepositsResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureDateOrderDepositsReply,
    :schema_name => XSD::QName.new(NsV2, "GetFutureDateOrderDepositsReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["deposits", ["ArrayOfFutureDateOrderDeposit", XSD::QName.new(NsV2, "Deposits")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfFutureDateOrderDeposit,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfFutureDateOrderDeposit"),
    :schema_element => [
      ["futureDateOrderDeposit", ["FutureDateOrderDeposit[]", XSD::QName.new(NsV2, "FutureDateOrderDeposit")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => FutureDateOrderDeposit,
    :schema_name => XSD::QName.new(NsV2, "FutureDateOrderDeposit"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["authCode", ["SOAP::SOAPString", XSD::QName.new(NsV2, "AuthCode")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["cardHolderName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardHolderName")], [0, 1]],
      ["cardNumber", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardNumber")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["merchantAccountType", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MerchantAccountType")], [0, 1]],
      ["orderId", ["SOAP::SOAPLong", XSD::QName.new(NsV2, "OrderId")], [0, 1]],
      ["orderTotal", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "OrderTotal")], [0, 1]],
      ["paymentId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PaymentId")], [0, 1]],
      ["sectionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SectionId")], [0, 1]],
      ["tenderId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TenderId")], [0, 1]],
      ["tillNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TillNumber")], [0, 1]],
      ["time", ["DateTimeOffset", XSD::QName.new(NsV2, "Time")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureDateOrders,
    :schema_name => XSD::QName.new(NsV2, "GetFutureDateOrders"),
    :schema_element => [
      ["request", "GetFutureDateOrdersRequest", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureDateOrdersRequest,
    :schema_name => XSD::QName.new(NsV2, "GetFutureDateOrdersRequest"),
    :schema_element => [
      ["futureDateRange", ["DateRange", XSD::QName.new(NsV2, "FutureDateRange")], [0, 1]],
      ["priceRollUp", ["SOAP::SOAPString", XSD::QName.new(NsV2, "PriceRollUp")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureDateOrdersResponse,
    :schema_name => XSD::QName.new(NsV2, "GetFutureDateOrdersResponse"),
    :schema_element => [
      ["getFutureDateOrdersResult", ["GetFutureDateOrdersReply", XSD::QName.new(NsV2, "GetFutureDateOrdersResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureDateOrdersReply,
    :schema_name => XSD::QName.new(NsV2, "GetFutureDateOrdersReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["futureDateOrders", ["ArrayOfOrder", XSD::QName.new(NsV2, "FutureDateOrders")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrder,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOrder"),
    :schema_element => [
      ["order", ["Order[]", XSD::QName.new(NsV2, "Order")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Order,
    :schema_name => XSD::QName.new(NsV2, "Order"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["closedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ClosedTime")], [0, 1]],
      ["count", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Count")], [0, 1]],
      ["customerId", [nil, XSD::QName.new(NsV2, "CustomerId")], [0, 1]],
      ["deposits", ["ArrayOfOrderDeposit", XSD::QName.new(NsV2, "Deposits")], [0, 1]],
      ["destinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DestinationId")], [0, 1]],
      ["discounts", ["ArrayOfOrderDiscount", XSD::QName.new(NsV2, "Discounts")], [0, 1]],
      ["displaySubtotal", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DisplaySubtotal")], [0, 1]],
      ["displayTax", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DisplayTax")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["entries", ["ArrayOfOrderEntry", XSD::QName.new(NsV2, "Entries")], [0, 1]],
      ["firstSendTime", ["DateTimeOffset", XSD::QName.new(NsV2, "FirstSendTime")], [0, 1]],
      ["grossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "GrossSales")], [0, 1]],
      ["guestCount", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "GuestCount")], [0, 1]],
      ["guestCountFractional", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "GuestCountFractional")], [0, 1]],
      ["id", ["SOAP::SOAPLong", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["idEncoded", ["SOAP::SOAPString", XSD::QName.new(NsV2, "IdEncoded")], [0, 1]],
      ["idNoLocation", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "IdNoLocation")], [0, 1]],
      ["isClosed", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsClosed")], [0, 1]],
      ["isFutureOrder", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsFutureOrder")], [0, 1]],
      ["isRefund", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsRefund")], [0, 1]],
      ["isTaxExempt", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsTaxExempt")], [0, 1]],
      ["modifiedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ModifiedTime")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["netSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "NetSales")], [0, 1]],
      ["openedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "OpenedTime")], [0, 1]],
      ["payments", ["ArrayOfOrderPayment", XSD::QName.new(NsV2, "Payments")], [0, 1]],
      ["pickupTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "PickupTime")], [0, 1]],
      ["promotions", ["ArrayOfOrderPromotion", XSD::QName.new(NsV2, "Promotions")], [0, 1]],
      ["rounding", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Rounding")], [0, 1]],
      ["sectionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SectionId")], [0, 1]],
      ["subtotal", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Subtotal")], [0, 1]],
      ["surcharges", ["ArrayOfOrderSurcharge", XSD::QName.new(NsV2, "Surcharges")], [0, 1]],
      ["tax", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Tax")], [0, 1]],
      ["taxExemptId", ["SOAP::SOAPString", XSD::QName.new(NsV2, "TaxExemptId")], [0, 1]],
      ["terminalId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TerminalId")], [0, 1]],
      ["tillNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TillNumber")], [0, 1]],
      ["total", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Total")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderDeposit,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOrderDeposit"),
    :schema_element => [
      ["orderDeposit", ["OrderDeposit[]", XSD::QName.new(NsV2, "OrderDeposit")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderDeposit,
    :schema_name => XSD::QName.new(NsV2, "OrderDeposit"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["isApplied", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsApplied")], [0, 1]],
      ["isDeleted", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeleted")], [0, 1]],
      ["isReversal", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsReversal")], [0, 1]],
      ["originalOrderDepositId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OriginalOrderDepositId")], [0, 1]],
      ["paymentId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PaymentId")], [0, 1]],
      ["tenderId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TenderId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderDiscount,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOrderDiscount"),
    :schema_element => [
      ["orderDiscount", ["OrderDiscount[]", XSD::QName.new(NsV2, "OrderDiscount")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderDiscount,
    :schema_name => XSD::QName.new(NsV2, "OrderDiscount"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["approverEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ApproverEmployeeId")], [0, 1]],
      ["discountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DiscountId")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["loyaltyRewardId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "LoyaltyRewardId")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["source", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Source")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderEntry,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOrderEntry"),
    :schema_element => [
      ["orderEntry", ["OrderEntry[]", XSD::QName.new(NsV2, "OrderEntry")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderEntry,
    :schema_name => XSD::QName.new(NsV2, "OrderEntry"),
    :schema_element => [
      ["dayPartId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DayPartId")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["promotions", ["ArrayOfOrderEntryPromotion", XSD::QName.new(NsV2, "Promotions")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderEntryPromotion,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOrderEntryPromotion"),
    :schema_element => [
      ["orderEntryPromotion", ["OrderEntryPromotion[]", XSD::QName.new(NsV2, "OrderEntryPromotion")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderEntryPromotion,
    :schema_name => XSD::QName.new(NsV2, "OrderEntryPromotion"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["orderPromotionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OrderPromotionId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderItem,
    :schema_name => XSD::QName.new(NsV2, "OrderItem"),
    :schema_element => [
      ["dayPartId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DayPartId")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["promotions", ["ArrayOfOrderEntryPromotion", XSD::QName.new(NsV2, "Promotions")], [0, 1]],
      ["compositeOrderItemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "CompositeOrderItemId")], [0, 1]],
      ["denominator", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Denominator")], [0, 1]],
      ["destinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DestinationId")], [0, 1]],
      ["discounts", ["ArrayOfOrderItemDiscount", XSD::QName.new(NsV2, "Discounts")], [0, 1]],
      ["displayPrice", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DisplayPrice")], [0, 1]],
      ["grossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "GrossSales")], [0, 1]],
      ["isCleared", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsCleared")], [0, 1]],
      ["isDeleted", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeleted")], [0, 1]],
      ["isVoided", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsVoided")], [0, 1]],
      ["itemGrossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "ItemGrossSales")], [0, 1]],
      ["itemNetSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "ItemNetSales")], [0, 1]],
      ["modifiers", ["ArrayOfOrderItemModifier", XSD::QName.new(NsV2, "Modifiers")], [0, 1]],
      ["netSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "NetSales")], [0, 1]],
      ["note", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Note")], [0, 1]],
      ["splitItemId", ["SOAP::SOAPShort", XSD::QName.new(NsV2, "SplitItemId")], [0, 1]],
      ["taxes", ["ArrayOfOrderEntryTax", XSD::QName.new(NsV2, "Taxes")], [0, 1]],
      ["void", ["OrderItemVoid", XSD::QName.new(NsV2, "Void")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderItemDiscount,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOrderItemDiscount"),
    :schema_element => [
      ["orderItemDiscount", ["OrderItemDiscount[]", XSD::QName.new(NsV2, "OrderItemDiscount")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderItemDiscount,
    :schema_name => XSD::QName.new(NsV2, "OrderItemDiscount"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["orderDiscountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OrderDiscountId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderItemModifier,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOrderItemModifier"),
    :schema_element => [
      ["orderItemModifier", ["OrderItemModifier[]", XSD::QName.new(NsV2, "OrderItemModifier")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderItemModifier,
    :schema_name => XSD::QName.new(NsV2, "OrderItemModifier"),
    :schema_element => [
      ["displayPrice", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DisplayPrice")], [0, 1]],
      ["grossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "GrossSales")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemGrossSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "ItemGrossSales")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["itemNetSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "ItemNetSales")], [0, 1]],
      ["modifierCodeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ModifierCodeId")], [0, 1]],
      ["modifierGroupId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ModifierGroupId")], [0, 1]],
      ["modifiers", ["ArrayOfOrderItemModifier", XSD::QName.new(NsV2, "Modifiers")], [0, 1]],
      ["netSales", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "NetSales")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["taxes", ["ArrayOfOrderEntryTax", XSD::QName.new(NsV2, "Taxes")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderEntryTax,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOrderEntryTax"),
    :schema_element => [
      ["orderEntryTax", ["OrderEntryTax[]", XSD::QName.new(NsV2, "OrderEntryTax")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderEntryTax,
    :schema_name => XSD::QName.new(NsV2, "OrderEntryTax"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["isInclusive", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsInclusive")], [0, 1]],
      ["taxId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TaxId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderItemVoid,
    :schema_name => XSD::QName.new(NsV2, "OrderItemVoid"),
    :schema_element => [
      ["approverEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ApproverEmployeeId")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["time", ["DateTimeOffset", XSD::QName.new(NsV2, "Time")], [0, 1]],
      ["voidReasonId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "VoidReasonId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderGiftCard,
    :schema_name => XSD::QName.new(NsV2, "OrderGiftCard"),
    :schema_element => [
      ["dayPartId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DayPartId")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["promotions", ["ArrayOfOrderEntryPromotion", XSD::QName.new(NsV2, "Promotions")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderPayment,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOrderPayment"),
    :schema_element => [
      ["orderPayment", ["OrderPayment[]", XSD::QName.new(NsV2, "OrderPayment")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderPayment,
    :schema_name => XSD::QName.new(NsV2, "OrderPayment"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["cardHolderName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardHolderName")], [0, 1]],
      ["cardNumber", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardNumber")], [0, 1]],
      ["change", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Change")], [0, 1]],
      ["creditCardTransactionInformation", ["CreditCardTransactionInformation", XSD::QName.new(NsV2, "CreditCardTransactionInformation")], [0, 1]],
      ["details", ["ArrayOfOrderPaymentDetail", XSD::QName.new(NsV2, "Details")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["isDeleted", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeleted")], [0, 1]],
      ["merchantAccountType", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MerchantAccountType")], [0, 1]],
      ["tenderId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TenderId")], [0, 1]],
      ["tillNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TillNumber")], [0, 1]],
      ["tipAmount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "TipAmount")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => CreditCardTransactionInformation,
    :schema_name => XSD::QName.new(NsV2, "CreditCardTransactionInformation"),
    :schema_element => [
      ["authorizationCode", ["SOAP::SOAPString", XSD::QName.new(NsV2, "AuthorizationCode")], [0, 1]],
      ["cardToken", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardToken")], [0, 1]],
      ["clientTransactionIdentifier", ["SOAP::SOAPString", XSD::QName.new(NsV2, "ClientTransactionIdentifier")], [0, 1]],
      ["result", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Result")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderPaymentDetail,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOrderPaymentDetail"),
    :schema_element => [
      ["orderPaymentDetail", ["OrderPaymentDetail[]", XSD::QName.new(NsV2, "OrderPaymentDetail")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderPaymentDetail,
    :schema_name => XSD::QName.new(NsV2, "OrderPaymentDetail"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["tillNumber", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TillNumber")], [0, 1]],
      ["tipAmount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "TipAmount")], [0, 1]],
      ["type", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Type")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderPromotion,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOrderPromotion"),
    :schema_element => [
      ["orderPromotion", ["OrderPromotion[]", XSD::QName.new(NsV2, "OrderPromotion")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderPromotion,
    :schema_name => XSD::QName.new(NsV2, "OrderPromotion"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["approverEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ApproverEmployeeId")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["promotionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PromotionId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOrderSurcharge,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOrderSurcharge"),
    :schema_element => [
      ["orderSurcharge", ["OrderSurcharge[]", XSD::QName.new(NsV2, "OrderSurcharge")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OrderSurcharge,
    :schema_name => XSD::QName.new(NsV2, "OrderSurcharge"),
    :schema_element => [
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["approverEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ApproverEmployeeId")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["isSystemApplied", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsSystemApplied")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["surchargeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SurchargeId")], [0, 1]],
      ["taxes", ["ArrayOfOrderEntryTax", XSD::QName.new(NsV2, "Taxes")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrders,
    :schema_name => XSD::QName.new(NsV2, "GetOrders"),
    :schema_element => [
      ["request", "GetOrdersRequest", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrdersRequest,
    :schema_name => XSD::QName.new(NsV2, "GetOrdersRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["excludeOpenOrders", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ExcludeOpenOrders")], [0, 1]],
      ["modifiedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ModifiedTime")], [0, 1]],
      ["priceRollUp", ["SOAP::SOAPString", XSD::QName.new(NsV2, "PriceRollUp")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrdersResponse,
    :schema_name => XSD::QName.new(NsV2, "GetOrdersResponse"),
    :schema_element => [
      ["getOrdersResult", ["GetOrdersReply", XSD::QName.new(NsV2, "GetOrdersResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOrdersReply,
    :schema_name => XSD::QName.new(NsV2, "GetOrdersReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["orders", ["ArrayOfOrder", XSD::QName.new(NsV2, "Orders")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTills,
    :schema_name => XSD::QName.new(NsV2, "GetTills"),
    :schema_element => [
      ["request", "GetTillsRequest", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTillsRequest,
    :schema_name => XSD::QName.new(NsV2, "GetTillsRequest"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTillsResponse,
    :schema_name => XSD::QName.new(NsV2, "GetTillsResponse"),
    :schema_element => [
      ["getTillsResult", ["GetTillsReply", XSD::QName.new(NsV2, "GetTillsResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetTillsReply,
    :schema_name => XSD::QName.new(NsV2, "GetTillsReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["tills", ["ArrayOfTill", XSD::QName.new(NsV2, "Tills")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfTill,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfTill"),
    :schema_element => [
      ["till", ["Till[]", XSD::QName.new(NsV2, "Till")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Till,
    :schema_name => XSD::QName.new(NsV2, "Till"),
    :schema_element => [
      ["businessDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BusinessDate")], [0, 1]],
      ["cashDrawerId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "CashDrawerId")], [0, 1]],
      ["closedByEmployeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ClosedByEmployeeId")], [0, 1]],
      ["closedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "ClosedTime")], [0, 1]],
      ["declaredCash", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "DeclaredCash")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["isClosed", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsClosed")], [0, 1]],
      ["isPublic", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsPublic")], [0, 1]],
      ["isVirtual", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsVirtual")], [0, 1]],
      ["number", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["openedTime", ["DateTimeOffset", XSD::QName.new(NsV2, "OpenedTime")], [0, 1]],
      ["overShort", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "OverShort")], [0, 1]],
      ["paidInOuts", ["ArrayOfPaidInOut", XSD::QName.new(NsV2, "PaidInOuts")], [0, 1]],
      ["startingBank", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "StartingBank")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfPaidInOut,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfPaidInOut"),
    :schema_element => [
      ["paidInOut", ["PaidInOut[]", XSD::QName.new(NsV2, "PaidInOut")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => PaidInOut,
    :schema_name => XSD::QName.new(NsV2, "PaidInOut"),
    :schema_element => [
      ["accountType", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "AccountType")], [0, 1]],
      ["amount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Amount")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["employeeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "EmployeeId")], [0, 1]],
      ["number", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Number")], [0, 1]],
      ["pettyAccountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PettyAccountId")], [0, 1]],
      ["time", ["DateTimeOffset", XSD::QName.new(NsV2, "Time")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => Reply,
    :schema_name => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => DateTimeOffset,
    :schema_name => XSD::QName.new(NsSystem, "DateTimeOffset"),
    :schema_element => [
      ["dateTime", ["SOAP::SOAPDateTime", XSD::QName.new(NsSystem, "DateTime")]],
      ["offsetMinutes", ["SOAP::SOAPShort", XSD::QName.new(NsSystem, "OffsetMinutes")]]
    ]
  )

  LiteralRegistry.register(
    :class => DateRange,
    :schema_name => XSD::QName.new(NsBrinkFoundation, "DateRange"),
    :schema_element => [
      ["v_end", ["SOAP::SOAPDateTime", XSD::QName.new(NsBrinkFoundation, "End")], [0, 1]],
      ["start", ["SOAP::SOAPDateTime", XSD::QName.new(NsBrinkFoundation, "Start")], [0, 1]]
    ]
  )
end
