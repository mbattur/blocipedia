# encoding: UTF-8
# Generated by wsdl2ruby (SOAP4R-NG/2.0.3)
require_relative 'SettingsWebService2.rb'
require 'soap/mapping'

module SettingsWebService2MappingRegistry
  EncodedRegistry = ::SOAP::Mapping::EncodedRegistry.new
  LiteralRegistry = ::SOAP::Mapping::LiteralRegistry.new
  NsArrays = "http://schemas.microsoft.com/2003/10/Serialization/Arrays"
  NsPosWebService = "http://schemas.datacontract.org/2004/07/Pos.Web.Service"
  NsPosWebServiceSettingsVersion2Data = "http://schemas.datacontract.org/2004/07/Pos.Web.Service.Settings.Version2.Data"
  NsV2 = "http://www.brinksoftware.com/webservices/settings/v2"

  EncodedRegistry.register(
    :class => GetEmployeesReply,
    :schema_type => XSD::QName.new(NsV2, "GetEmployeesReply"),
    :schema_basetype => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfEmployeen1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfEmployee", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfEmployeen1jeL_SCY,
    :schema_type => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfEmployeen1jeL_SCY"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfEmployee", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SettingsWebService2Reply,
    :schema_type => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfEmployee,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfEmployee"),
    :schema_element => [
      ["employee", ["Employee[]", XSD::QName.new(NsV2, "Employee")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => Employee,
    :schema_type => XSD::QName.new(NsV2, "Employee"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["address1", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Address1")], [0, 1]],
      ["address2", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Address2")], [0, 1]],
      ["alternateId", ["SOAP::SOAPString", XSD::QName.new(NsV2, "AlternateId")], [0, 1]],
      ["birthDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BirthDate")], [0, 1]],
      ["canLoginWithCard", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanLoginWithCard")], [0, 1]],
      ["canLoginWithFinger", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanLoginWithFinger")], [0, 1]],
      ["canLoginWithPin", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanLoginWithPin")], [0, 1]],
      ["cardNumber", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardNumber")], [0, 1]],
      ["cellPhone", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CellPhone")], [0, 1]],
      ["city", ["SOAP::SOAPString", XSD::QName.new(NsV2, "City")], [0, 1]],
      ["clockedInDiscountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ClockedInDiscountId")], [0, 1]],
      ["clockedOutDiscountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ClockedOutDiscountId")], [0, 1]],
      ["displayName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "DisplayName")], [0, 1]],
      ["emailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV2, "EmailAddress")], [0, 1]],
      ["exportToPayroll", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ExportToPayroll")], [0, 1]],
      ["firstName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "FirstName")], [0, 1]],
      ["healthCardExpirationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "HealthCardExpirationDate")], [0, 1]],
      ["hireDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "HireDate")], [0, 1]],
      ["homeLocationId", [nil, XSD::QName.new(NsV2, "HomeLocationId")], [0, 1]],
      ["homePhone", ["SOAP::SOAPString", XSD::QName.new(NsV2, "HomePhone")], [0, 1]],
      ["identificationVerified", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IdentificationVerified")], [0, 1]],
      ["isExempt", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsExempt")], [0, 1]],
      ["isSalaried", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsSalaried")], [0, 1]],
      ["jobs", ["ArrayOfEmployeeJob", XSD::QName.new(NsV2, "Jobs")], [0, 1]],
      ["lastName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "LastName")], [0, 1]],
      ["limitLocations", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "LimitLocations")], [0, 1]],
      ["maritalStatus", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "MaritalStatus")], [0, 1]],
      ["maximumDailyDiscountAmount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "MaximumDailyDiscountAmount")], [0, 1]],
      ["maximumDailyDiscountCount", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MaximumDailyDiscountCount")], [0, 1]],
      ["notes", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Notes")], [0, 1]],
      ["payrollId", ["SOAP::SOAPString", XSD::QName.new(NsV2, "PayrollId")], [0, 1]],
      ["permissions", ["ArrayOfEmployeePermission", XSD::QName.new(NsV2, "Permissions")], [0, 1]],
      ["pin", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Pin")], [0, 1]],
      ["ssn", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Ssn")], [0, 1]],
      ["state", ["SOAP::SOAPString", XSD::QName.new(NsV2, "State")], [0, 1]],
      ["taxWithholdingAllowance", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TaxWithholdingAllowance")], [0, 1]],
      ["terminated", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "Terminated")], [0, 1]],
      ["terminationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "TerminationDate")], [0, 1]],
      ["validLocations", ["ArrayOfEmployeeLocation", XSD::QName.new(NsV2, "ValidLocations")], [0, 1]],
      ["zip", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Zip")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => KeyedSettingsObject,
    :schema_type => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfEmployeeJob,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfEmployeeJob"),
    :schema_element => [
      ["employeeJob", ["EmployeeJob[]", XSD::QName.new(NsV2, "EmployeeJob")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => EmployeeJob,
    :schema_type => XSD::QName.new(NsV2, "EmployeeJob"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["jobId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "JobId")], [0, 1]],
      ["payRate", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "PayRate")], [0, 1]],
      ["securityLevelId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SecurityLevelId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfEmployeePermission,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfEmployeePermission"),
    :schema_element => [
      ["employeePermission", ["EmployeePermission[]", XSD::QName.new(NsV2, "EmployeePermission")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => EmployeePermission,
    :schema_type => XSD::QName.new(NsV2, "EmployeePermission"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["permissionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PermissionId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfEmployeeLocation,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfEmployeeLocation"),
    :schema_element => [
      ["employeeLocation", ["EmployeeLocation[]", XSD::QName.new(NsV2, "EmployeeLocation")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => EmployeeLocation,
    :schema_type => XSD::QName.new(NsV2, "EmployeeLocation"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["locationId", [nil, XSD::QName.new(NsV2, "LocationId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetFutureOrderingOptionsReply,
    :schema_type => XSD::QName.new(NsV2, "GetFutureOrderingOptionsReply"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["futureOrderingOptions", ["FutureOrderingOptions", XSD::QName.new(NsV2, "FutureOrderingOptions")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => FutureOrderingOptions,
    :schema_type => XSD::QName.new(NsV2, "FutureOrderingOptions"),
    :schema_element => [
      ["allowFutureDateOrdering", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AllowFutureDateOrdering")], [0, 1]],
      ["destinations", ["ArrayOfOnlineOrderingDestination", XSD::QName.new(NsV2, "Destinations")], [0, 1]],
      ["isEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsEnabled")], [0, 1]],
      ["leadTimeThresholds", ["ArrayOfLeadTimeThreshold", XSD::QName.new(NsV2, "LeadTimeThresholds")], [0, 1]],
      ["maximumDaysInAdvance", ["SOAP::SOAPShort", XSD::QName.new(NsV2, "MaximumDaysInAdvance")], [0, 1]],
      ["minimumLeadMinutes", ["SOAP::SOAPShort", XSD::QName.new(NsV2, "MinimumLeadMinutes")], [0, 1]],
      ["minimumPrepMinutes", ["SOAP::SOAPShort", XSD::QName.new(NsV2, "MinimumPrepMinutes")], [0, 1]],
      ["prepTimeThresholds", ["ArrayOfPrepTimeThreshold", XSD::QName.new(NsV2, "PrepTimeThresholds")], [0, 1]],
      ["requiredDepositPercent", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "RequiredDepositPercent")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfOnlineOrderingDestination,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOnlineOrderingDestination"),
    :schema_element => [
      ["onlineOrderingDestination", ["OnlineOrderingDestination[]", XSD::QName.new(NsV2, "OnlineOrderingDestination")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => OnlineOrderingDestination,
    :schema_type => XSD::QName.new(NsV2, "OnlineOrderingDestination"),
    :schema_element => [
      ["destinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DestinationId")], [0, 1]],
      ["instructions", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Instructions")], [0, 1]],
      ["isDefault", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDefault")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfLeadTimeThreshold,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfLeadTimeThreshold"),
    :schema_element => [
      ["leadTimeThreshold", ["LeadTimeThreshold[]", XSD::QName.new(NsV2, "LeadTimeThreshold")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => LeadTimeThreshold,
    :schema_type => XSD::QName.new(NsV2, "LeadTimeThreshold"),
    :schema_element => [
      ["leadMinutes", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "LeadMinutes")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfPrepTimeThreshold,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfPrepTimeThreshold"),
    :schema_element => [
      ["prepTimeThreshold", ["PrepTimeThreshold[]", XSD::QName.new(NsV2, "PrepTimeThreshold")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => PrepTimeThreshold,
    :schema_type => XSD::QName.new(NsV2, "PrepTimeThreshold"),
    :schema_element => [
      ["prepMinutes", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PrepMinutes")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetJobsReply,
    :schema_type => XSD::QName.new(NsV2, "GetJobsReply"),
    :schema_basetype => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfJobn1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfJob", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfJobn1jeL_SCY,
    :schema_type => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfJobn1jeL_SCY"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfJob", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfJob,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfJob"),
    :schema_element => [
      ["job", ["Job[]", XSD::QName.new(NsV2, "Job")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => Job,
    :schema_type => XSD::QName.new(NsV2, "Job"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["allowAddItem", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AllowAddItem")], [0, 1]],
      ["alternateId", ["SOAP::SOAPString", XSD::QName.new(NsV2, "AlternateId")], [0, 1]],
      ["canOpenAnyOrder", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanOpenAnyOrder")], [0, 1]],
      ["cannotClose", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CannotClose")], [0, 1]],
      ["cashDrawer", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CashDrawer")], [0, 1]],
      ["checkoutRequiresApproval", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CheckoutRequiresApproval")], [0, 1]],
      ["clockInRequiresApproval", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ClockInRequiresApproval")], [0, 1]],
      ["clockOutRequiresApproval", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ClockOutRequiresApproval")], [0, 1]],
      ["declareTips", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeclareTips")], [0, 1]],
      ["defaultScreenId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DefaultScreenId")], [0, 1]],
      ["displayColor", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DisplayColor")], [0, 1]],
      ["excludeOnSalesAndLaborReports", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ExcludeOnSalesAndLaborReports")], [0, 1]],
      ["exemptFromLaborSchedule", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ExemptFromLaborSchedule")], [0, 1]],
      ["exportCode", ["SOAP::SOAPString", XSD::QName.new(NsV2, "ExportCode")], [0, 1]],
      ["groupItemsBySeat", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "GroupItemsBySeat")], [0, 1]],
      ["isBartender", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsBartender")], [0, 1]],
      ["isDeliveryDispatcher", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeliveryDispatcher")], [0, 1]],
      ["isDeliveryDriver", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeliveryDriver")], [0, 1]],
      ["isHostess", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsHostess")], [0, 1]],
      ["itemLookup", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ItemLookup")], [0, 1]],
      ["laneId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "LaneId")], [0, 1]],
      ["limitShiftBreakTypes", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "LimitShiftBreakTypes")], [0, 1]],
      ["limitedDestinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "LimitedDestinationId")], [0, 1]],
      ["locationType", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "LocationType")], [0, 1]],
      ["menus", ["ArrayOfJobMenu", XSD::QName.new(NsV2, "Menus")], [0, 1]],
      ["noCashTransactions", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "NoCashTransactions")], [0, 1]],
      ["orderEntry", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "OrderEntry")], [0, 1]],
      ["orderScreenId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OrderScreenId")], [0, 1]],
      ["sectionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SectionId")], [0, 1]],
      ["selfBanking", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "SelfBanking")], [0, 1]],
      ["selfVoid", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "SelfVoid")], [0, 1]],
      ["shiftBreakTypes", ["ArrayOfJobShiftBreakType", XSD::QName.new(NsV2, "ShiftBreakTypes")], [0, 1]],
      ["tabs", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "Tabs")], [0, 1]],
      ["training", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "Training")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => NamedSettingsObject,
    :schema_type => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfJobMenu,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfJobMenu"),
    :schema_element => [
      ["jobMenu", ["JobMenu[]", XSD::QName.new(NsV2, "JobMenu")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => JobMenu,
    :schema_type => XSD::QName.new(NsV2, "JobMenu"),
    :schema_element => [
      ["days", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Days")], [0, 1]],
      ["menuId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MenuId")], [0, 1]],
      ["startTime", [nil, XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfJobShiftBreakType,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfJobShiftBreakType"),
    :schema_element => [
      ["jobShiftBreakType", ["JobShiftBreakType[]", XSD::QName.new(NsV2, "JobShiftBreakType")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => JobShiftBreakType,
    :schema_type => XSD::QName.new(NsV2, "JobShiftBreakType"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["shiftBreakTypeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ShiftBreakTypeId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetKitchenQueuesReply,
    :schema_type => XSD::QName.new(NsV2, "GetKitchenQueuesReply"),
    :schema_basetype => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfKitchenQueuen1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfKitchenQueue", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfKitchenQueuen1jeL_SCY,
    :schema_type => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfKitchenQueuen1jeL_SCY"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfKitchenQueue", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfKitchenQueue,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfKitchenQueue"),
    :schema_element => [
      ["kitchenQueue", ["KitchenQueue[]", XSD::QName.new(NsV2, "KitchenQueue")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => KitchenQueue,
    :schema_type => XSD::QName.new(NsV2, "KitchenQueue"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMenuRequest,
    :schema_type => XSD::QName.new(NsV2, "GetMenuRequest"),
    :schema_element => [
      ["menuId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MenuId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetMenuReply,
    :schema_type => XSD::QName.new(NsV2, "GetMenuReply"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["menu", ["Menu", XSD::QName.new(NsV2, "Menu")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfMenuCategory,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfMenuCategory"),
    :schema_element => [
      ["menuCategory", ["MenuCategory[]", XSD::QName.new(NsV2, "MenuCategory")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => MenuCategory,
    :schema_type => XSD::QName.new(NsV2, "MenuCategory"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["items", ["ArrayOfMenuItem", XSD::QName.new(NsV2, "Items")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfMenuItem,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfMenuItem"),
    :schema_element => [
      ["menuItem", ["MenuItem[]", XSD::QName.new(NsV2, "MenuItem")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => MenuItem,
    :schema_type => XSD::QName.new(NsV2, "MenuItem"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["imageId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ImageId")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["modifierMethod", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "ModifierMethod")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["priceMethod", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "PriceMethod")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetOnlineOrderingMenuOptionsReply,
    :schema_type => XSD::QName.new(NsV2, "GetOnlineOrderingMenuOptionsReply"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["alternateMenus", ["ArrayOfAlternateMenu", XSD::QName.new(NsV2, "AlternateMenus")], [0, 1]],
      ["onlineOrderingMenuId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OnlineOrderingMenuId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfAlternateMenu,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfAlternateMenu"),
    :schema_element => [
      ["alternateMenu", ["AlternateMenu[]", XSD::QName.new(NsV2, "AlternateMenu")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => AlternateMenu,
    :schema_type => XSD::QName.new(NsV2, "AlternateMenu"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["days", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Days")], [0, 1]],
      ["endTime", [nil, XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["menuId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MenuId")], [0, 1]],
      ["startTime", [nil, XSD::QName.new(NsV2, "StartTime")], [0, 1]],
      ["timeType", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "TimeType")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetPermissionsReply,
    :schema_type => XSD::QName.new(NsV2, "GetPermissionsReply"),
    :schema_basetype => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfPermissionn1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfPermission", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfPermissionn1jeL_SCY,
    :schema_type => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfPermissionn1jeL_SCY"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfPermission", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfPermission,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfPermission"),
    :schema_element => [
      ["permission", ["Permission[]", XSD::QName.new(NsV2, "Permission")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => Permission,
    :schema_type => XSD::QName.new(NsV2, "Permission"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["isActive", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsActive")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetPriceChangesReply,
    :schema_type => XSD::QName.new(NsV2, "GetPriceChangesReply"),
    :schema_basetype => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfPriceChangen1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfPriceChange", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfPriceChangen1jeL_SCY,
    :schema_type => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfPriceChangen1jeL_SCY"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfPriceChange", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfPriceChange"),
    :schema_element => [
      ["priceChange", ["PriceChange[]", XSD::QName.new(NsV2, "PriceChange")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => PriceChange,
    :schema_type => XSD::QName.new(NsV2, "PriceChange"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["days", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Days")], [0, 1]],
      ["endDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "EndDate")], [0, 1]],
      ["endTime", [nil, XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["enforceDateRanges", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "EnforceDateRanges")], [0, 1]],
      ["enforceDays", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "EnforceDays")], [0, 1]],
      ["enforceTimeRanges", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "EnforceTimeRanges")], [0, 1]],
      ["isActive", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsActive")], [0, 1]],
      ["itemPriceChanges", ["ArrayOfItemPriceChange", XSD::QName.new(NsV2, "ItemPriceChanges")], [0, 1]],
      ["priceChangeDestinations", ["ArrayOfPriceChangeDestination", XSD::QName.new(NsV2, "PriceChangeDestinations")], [0, 1]],
      ["startDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "StartDate")], [0, 1]],
      ["startTime", [nil, XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfItemPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfItemPriceChange"),
    :schema_element => [
      ["itemPriceChange", ["ItemPriceChange[]", XSD::QName.new(NsV2, "ItemPriceChange")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ItemPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ItemPriceChange"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["componentPriceChanges", ["ArrayOfComponentPriceChange", XSD::QName.new(NsV2, "ComponentPriceChanges")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["originalPrice", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "OriginalPrice")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfComponentPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfComponentPriceChange"),
    :schema_element => [
      ["componentPriceChange", ["ComponentPriceChange[]", XSD::QName.new(NsV2, "ComponentPriceChange")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ComponentPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ComponentPriceChange"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["componentId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ComponentId")], [0, 1]],
      ["componentItemPriceChanges", ["ArrayOfComponentItemPriceChange", XSD::QName.new(NsV2, "ComponentItemPriceChanges")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfComponentItemPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfComponentItemPriceChange"),
    :schema_element => [
      ["componentItemPriceChange", ["ComponentItemPriceChange[]", XSD::QName.new(NsV2, "ComponentItemPriceChange")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => ComponentItemPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ComponentItemPriceChange"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfPriceChangeDestination,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfPriceChangeDestination"),
    :schema_element => [
      ["priceChangeDestination", ["PriceChangeDestination[]", XSD::QName.new(NsV2, "PriceChangeDestination")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => PriceChangeDestination,
    :schema_type => XSD::QName.new(NsV2, "PriceChangeDestination"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["destinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DestinationId")], [0, 1]],
      ["destinationName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "DestinationName")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetSecurityLevelsReply,
    :schema_type => XSD::QName.new(NsV2, "GetSecurityLevelsReply"),
    :schema_basetype => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfSecurityLeveln1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfSecurityLevel", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfSecurityLeveln1jeL_SCY,
    :schema_type => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfSecurityLeveln1jeL_SCY"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfSecurityLevel", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfSecurityLevel,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfSecurityLevel"),
    :schema_element => [
      ["securityLevel", ["SecurityLevel[]", XSD::QName.new(NsV2, "SecurityLevel")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => SecurityLevel,
    :schema_type => XSD::QName.new(NsV2, "SecurityLevel"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["addSurcharges", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AddSurcharges")], [0, 1]],
      ["allowExcessEmployeeCardUsage", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AllowExcessEmployeeCardUsage")], [0, 1]],
      ["approveCheckout", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveCheckout")], [0, 1]],
      ["approveClockIn", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveClockIn")], [0, 1]],
      ["approveClockOut", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveClockOut")], [0, 1]],
      ["approveDiscounts", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveDiscounts")], [0, 1]],
      ["approveLoyaltyCards", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveLoyaltyCards")], [0, 1]],
      ["approveOrderRequestTime", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveOrderRequestTime")], [0, 1]],
      ["approvePromotions", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApprovePromotions")], [0, 1]],
      ["assignCharity", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AssignCharity")], [0, 1]],
      ["canAdjustTipsFromAnyTill", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanAdjustTipsFromAnyTill")], [0, 1]],
      ["canCloseOrdersAssignedToDeliveryDrivers", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanCloseOrdersAssignedToDeliveryDrivers")], [0, 1]],
      ["canOpenAnyDrawer", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanOpenAnyDrawer")], [0, 1]],
      ["deleteDeposits", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeleteDeposits")], [0, 1]],
      ["deleteDiscounts", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeleteDiscounts")], [0, 1]],
      ["deleteDonations", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeleteDonations")], [0, 1]],
      ["deletePayments", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeletePayments")], [0, 1]],
      ["deletePromotions", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeletePromotions")], [0, 1]],
      ["deleteSurcharges", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeleteSurcharges")], [0, 1]],
      ["forceAuthorization", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ForceAuthorization")], [0, 1]],
      ["forceReconciliation", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ForceReconciliation")], [0, 1]],
      ["manageCashDrawers", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ManageCashDrawers")], [0, 1]],
      ["overrideDailyLoyaltyCardLimit", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "OverrideDailyLoyaltyCardLimit")], [0, 1]],
      ["overrideMaximumTipPercent", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "OverrideMaximumTipPercent")], [0, 1]],
      ["permissions", ["ArrayOfSecurityLevelPermission", XSD::QName.new(NsV2, "Permissions")], [0, 1]],
      ["reopenOrders", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ReopenOrders")], [0, 1]],
      ["splitCheck", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "SplitCheck")], [0, 1]],
      ["voidItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "VoidItems")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfSecurityLevelPermission,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfSecurityLevelPermission"),
    :schema_element => [
      ["securityLevelPermission", ["SecurityLevelPermission[]", XSD::QName.new(NsV2, "SecurityLevelPermission")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => SecurityLevelPermission,
    :schema_type => XSD::QName.new(NsV2, "SecurityLevelPermission"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["permissionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PermissionId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SaveEmployeesRequest,
    :schema_type => XSD::QName.new(NsV2, "SaveEmployeesRequest"),
    :schema_element => [
      ["employees", ["ArrayOfEmployee", XSD::QName.new(NsV2, "Employees")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SaveEmployeesReply,
    :schema_type => XSD::QName.new(NsV2, "SaveEmployeesReply"),
    :schema_basetype => XSD::QName.new(NsV2, "SaveNodeSettingsCollectionReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["saveResults", ["ArrayOfKeyedSettingsObjectSaveResult", XSD::QName.new(NsV2, "SaveResults")], [0, 1]],
      ["validationMessages", ["ArrayOfstring", XSD::QName.new(NsV2, "ValidationMessages")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => SaveNodeSettingsCollectionReply,
    :schema_type => XSD::QName.new(NsV2, "SaveNodeSettingsCollectionReply"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["saveResults", ["ArrayOfKeyedSettingsObjectSaveResult", XSD::QName.new(NsV2, "SaveResults")], [0, 1]],
      ["validationMessages", ["ArrayOfstring", XSD::QName.new(NsV2, "ValidationMessages")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfKeyedSettingsObjectSaveResult,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfKeyedSettingsObjectSaveResult"),
    :schema_element => [
      ["keyedSettingsObjectSaveResult", ["KeyedSettingsObjectSaveResult[]", XSD::QName.new(NsV2, "KeyedSettingsObjectSaveResult")], [0, nil]]
    ]
  )

  EncodedRegistry.register(
    :class => KeyedSettingsObjectSaveResult,
    :schema_type => XSD::QName.new(NsV2, "KeyedSettingsObjectSaveResult"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["originalId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OriginalId")], [0, 1]],
      ["validationMessages", ["ArrayOfstring", XSD::QName.new(NsV2, "ValidationMessages")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => Reply,
    :schema_type => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => Menu,
    :schema_type => XSD::QName.new(NsPosWebServiceSettingsVersion2Data, "Menu"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["categories", ["ArrayOfMenuCategory", XSD::QName.new(NsPosWebServiceSettingsVersion2Data, "Categories")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsPosWebServiceSettingsVersion2Data, "Description")], [0, 1]],
      ["imageId", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebServiceSettingsVersion2Data, "ImageId")], [0, 1]]
    ]
  )

  EncodedRegistry.register(
    :class => ArrayOfstring,
    :schema_type => XSD::QName.new(NsArrays, "ArrayOfstring"),
    :schema_element => [
      ["string", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetEmployeesReply,
    :schema_type => XSD::QName.new(NsV2, "GetEmployeesReply"),
    :schema_basetype => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfEmployeen1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfEmployee", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfEmployeen1jeL_SCY,
    :schema_type => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfEmployeen1jeL_SCY"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfEmployee", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SettingsWebService2Reply,
    :schema_type => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_basetype => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfEmployee,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfEmployee"),
    :schema_element => [
      ["employee", ["Employee[]", XSD::QName.new(NsV2, "Employee")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Employee,
    :schema_type => XSD::QName.new(NsV2, "Employee"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["address1", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Address1")], [0, 1]],
      ["address2", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Address2")], [0, 1]],
      ["alternateId", ["SOAP::SOAPString", XSD::QName.new(NsV2, "AlternateId")], [0, 1]],
      ["birthDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BirthDate")], [0, 1]],
      ["canLoginWithCard", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanLoginWithCard")], [0, 1]],
      ["canLoginWithFinger", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanLoginWithFinger")], [0, 1]],
      ["canLoginWithPin", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanLoginWithPin")], [0, 1]],
      ["cardNumber", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardNumber")], [0, 1]],
      ["cellPhone", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CellPhone")], [0, 1]],
      ["city", ["SOAP::SOAPString", XSD::QName.new(NsV2, "City")], [0, 1]],
      ["clockedInDiscountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ClockedInDiscountId")], [0, 1]],
      ["clockedOutDiscountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ClockedOutDiscountId")], [0, 1]],
      ["displayName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "DisplayName")], [0, 1]],
      ["emailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV2, "EmailAddress")], [0, 1]],
      ["exportToPayroll", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ExportToPayroll")], [0, 1]],
      ["firstName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "FirstName")], [0, 1]],
      ["healthCardExpirationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "HealthCardExpirationDate")], [0, 1]],
      ["hireDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "HireDate")], [0, 1]],
      ["homeLocationId", [nil, XSD::QName.new(NsV2, "HomeLocationId")], [0, 1]],
      ["homePhone", ["SOAP::SOAPString", XSD::QName.new(NsV2, "HomePhone")], [0, 1]],
      ["identificationVerified", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IdentificationVerified")], [0, 1]],
      ["isExempt", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsExempt")], [0, 1]],
      ["isSalaried", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsSalaried")], [0, 1]],
      ["jobs", ["ArrayOfEmployeeJob", XSD::QName.new(NsV2, "Jobs")], [0, 1]],
      ["lastName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "LastName")], [0, 1]],
      ["limitLocations", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "LimitLocations")], [0, 1]],
      ["maritalStatus", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "MaritalStatus")], [0, 1]],
      ["maximumDailyDiscountAmount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "MaximumDailyDiscountAmount")], [0, 1]],
      ["maximumDailyDiscountCount", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MaximumDailyDiscountCount")], [0, 1]],
      ["notes", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Notes")], [0, 1]],
      ["payrollId", ["SOAP::SOAPString", XSD::QName.new(NsV2, "PayrollId")], [0, 1]],
      ["permissions", ["ArrayOfEmployeePermission", XSD::QName.new(NsV2, "Permissions")], [0, 1]],
      ["pin", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Pin")], [0, 1]],
      ["ssn", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Ssn")], [0, 1]],
      ["state", ["SOAP::SOAPString", XSD::QName.new(NsV2, "State")], [0, 1]],
      ["taxWithholdingAllowance", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TaxWithholdingAllowance")], [0, 1]],
      ["terminated", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "Terminated")], [0, 1]],
      ["terminationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "TerminationDate")], [0, 1]],
      ["validLocations", ["ArrayOfEmployeeLocation", XSD::QName.new(NsV2, "ValidLocations")], [0, 1]],
      ["zip", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Zip")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => KeyedSettingsObject,
    :schema_type => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfEmployeeJob,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfEmployeeJob"),
    :schema_element => [
      ["employeeJob", ["EmployeeJob[]", XSD::QName.new(NsV2, "EmployeeJob")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => EmployeeJob,
    :schema_type => XSD::QName.new(NsV2, "EmployeeJob"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["jobId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "JobId")], [0, 1]],
      ["payRate", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "PayRate")], [0, 1]],
      ["securityLevelId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SecurityLevelId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfEmployeePermission,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfEmployeePermission"),
    :schema_element => [
      ["employeePermission", ["EmployeePermission[]", XSD::QName.new(NsV2, "EmployeePermission")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => EmployeePermission,
    :schema_type => XSD::QName.new(NsV2, "EmployeePermission"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["permissionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PermissionId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfEmployeeLocation,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfEmployeeLocation"),
    :schema_element => [
      ["employeeLocation", ["EmployeeLocation[]", XSD::QName.new(NsV2, "EmployeeLocation")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => EmployeeLocation,
    :schema_type => XSD::QName.new(NsV2, "EmployeeLocation"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["locationId", [nil, XSD::QName.new(NsV2, "LocationId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureOrderingOptionsReply,
    :schema_type => XSD::QName.new(NsV2, "GetFutureOrderingOptionsReply"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["futureOrderingOptions", ["FutureOrderingOptions", XSD::QName.new(NsV2, "FutureOrderingOptions")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FutureOrderingOptions,
    :schema_type => XSD::QName.new(NsV2, "FutureOrderingOptions"),
    :schema_element => [
      ["allowFutureDateOrdering", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AllowFutureDateOrdering")], [0, 1]],
      ["destinations", ["ArrayOfOnlineOrderingDestination", XSD::QName.new(NsV2, "Destinations")], [0, 1]],
      ["isEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsEnabled")], [0, 1]],
      ["leadTimeThresholds", ["ArrayOfLeadTimeThreshold", XSD::QName.new(NsV2, "LeadTimeThresholds")], [0, 1]],
      ["maximumDaysInAdvance", ["SOAP::SOAPShort", XSD::QName.new(NsV2, "MaximumDaysInAdvance")], [0, 1]],
      ["minimumLeadMinutes", ["SOAP::SOAPShort", XSD::QName.new(NsV2, "MinimumLeadMinutes")], [0, 1]],
      ["minimumPrepMinutes", ["SOAP::SOAPShort", XSD::QName.new(NsV2, "MinimumPrepMinutes")], [0, 1]],
      ["prepTimeThresholds", ["ArrayOfPrepTimeThreshold", XSD::QName.new(NsV2, "PrepTimeThresholds")], [0, 1]],
      ["requiredDepositPercent", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "RequiredDepositPercent")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOnlineOrderingDestination,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfOnlineOrderingDestination"),
    :schema_element => [
      ["onlineOrderingDestination", ["OnlineOrderingDestination[]", XSD::QName.new(NsV2, "OnlineOrderingDestination")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OnlineOrderingDestination,
    :schema_type => XSD::QName.new(NsV2, "OnlineOrderingDestination"),
    :schema_element => [
      ["destinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DestinationId")], [0, 1]],
      ["instructions", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Instructions")], [0, 1]],
      ["isDefault", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDefault")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfLeadTimeThreshold,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfLeadTimeThreshold"),
    :schema_element => [
      ["leadTimeThreshold", ["LeadTimeThreshold[]", XSD::QName.new(NsV2, "LeadTimeThreshold")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => LeadTimeThreshold,
    :schema_type => XSD::QName.new(NsV2, "LeadTimeThreshold"),
    :schema_element => [
      ["leadMinutes", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "LeadMinutes")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfPrepTimeThreshold,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfPrepTimeThreshold"),
    :schema_element => [
      ["prepTimeThreshold", ["PrepTimeThreshold[]", XSD::QName.new(NsV2, "PrepTimeThreshold")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => PrepTimeThreshold,
    :schema_type => XSD::QName.new(NsV2, "PrepTimeThreshold"),
    :schema_element => [
      ["prepMinutes", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PrepMinutes")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetJobsReply,
    :schema_type => XSD::QName.new(NsV2, "GetJobsReply"),
    :schema_basetype => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfJobn1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfJob", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfJobn1jeL_SCY,
    :schema_type => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfJobn1jeL_SCY"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfJob", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfJob,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfJob"),
    :schema_element => [
      ["job", ["Job[]", XSD::QName.new(NsV2, "Job")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Job,
    :schema_type => XSD::QName.new(NsV2, "Job"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["allowAddItem", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AllowAddItem")], [0, 1]],
      ["alternateId", ["SOAP::SOAPString", XSD::QName.new(NsV2, "AlternateId")], [0, 1]],
      ["canOpenAnyOrder", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanOpenAnyOrder")], [0, 1]],
      ["cannotClose", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CannotClose")], [0, 1]],
      ["cashDrawer", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CashDrawer")], [0, 1]],
      ["checkoutRequiresApproval", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CheckoutRequiresApproval")], [0, 1]],
      ["clockInRequiresApproval", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ClockInRequiresApproval")], [0, 1]],
      ["clockOutRequiresApproval", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ClockOutRequiresApproval")], [0, 1]],
      ["declareTips", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeclareTips")], [0, 1]],
      ["defaultScreenId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DefaultScreenId")], [0, 1]],
      ["displayColor", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DisplayColor")], [0, 1]],
      ["excludeOnSalesAndLaborReports", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ExcludeOnSalesAndLaborReports")], [0, 1]],
      ["exemptFromLaborSchedule", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ExemptFromLaborSchedule")], [0, 1]],
      ["exportCode", ["SOAP::SOAPString", XSD::QName.new(NsV2, "ExportCode")], [0, 1]],
      ["groupItemsBySeat", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "GroupItemsBySeat")], [0, 1]],
      ["isBartender", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsBartender")], [0, 1]],
      ["isDeliveryDispatcher", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeliveryDispatcher")], [0, 1]],
      ["isDeliveryDriver", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeliveryDriver")], [0, 1]],
      ["isHostess", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsHostess")], [0, 1]],
      ["itemLookup", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ItemLookup")], [0, 1]],
      ["laneId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "LaneId")], [0, 1]],
      ["limitShiftBreakTypes", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "LimitShiftBreakTypes")], [0, 1]],
      ["limitedDestinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "LimitedDestinationId")], [0, 1]],
      ["locationType", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "LocationType")], [0, 1]],
      ["menus", ["ArrayOfJobMenu", XSD::QName.new(NsV2, "Menus")], [0, 1]],
      ["noCashTransactions", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "NoCashTransactions")], [0, 1]],
      ["orderEntry", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "OrderEntry")], [0, 1]],
      ["orderScreenId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OrderScreenId")], [0, 1]],
      ["sectionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SectionId")], [0, 1]],
      ["selfBanking", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "SelfBanking")], [0, 1]],
      ["selfVoid", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "SelfVoid")], [0, 1]],
      ["shiftBreakTypes", ["ArrayOfJobShiftBreakType", XSD::QName.new(NsV2, "ShiftBreakTypes")], [0, 1]],
      ["tabs", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "Tabs")], [0, 1]],
      ["training", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "Training")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => NamedSettingsObject,
    :schema_type => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfJobMenu,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfJobMenu"),
    :schema_element => [
      ["jobMenu", ["JobMenu[]", XSD::QName.new(NsV2, "JobMenu")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => JobMenu,
    :schema_type => XSD::QName.new(NsV2, "JobMenu"),
    :schema_element => [
      ["days", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Days")], [0, 1]],
      ["menuId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MenuId")], [0, 1]],
      ["startTime", [nil, XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfJobShiftBreakType,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfJobShiftBreakType"),
    :schema_element => [
      ["jobShiftBreakType", ["JobShiftBreakType[]", XSD::QName.new(NsV2, "JobShiftBreakType")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => JobShiftBreakType,
    :schema_type => XSD::QName.new(NsV2, "JobShiftBreakType"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["shiftBreakTypeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ShiftBreakTypeId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetKitchenQueuesReply,
    :schema_type => XSD::QName.new(NsV2, "GetKitchenQueuesReply"),
    :schema_basetype => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfKitchenQueuen1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfKitchenQueue", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfKitchenQueuen1jeL_SCY,
    :schema_type => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfKitchenQueuen1jeL_SCY"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfKitchenQueue", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfKitchenQueue,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfKitchenQueue"),
    :schema_element => [
      ["kitchenQueue", ["KitchenQueue[]", XSD::QName.new(NsV2, "KitchenQueue")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => KitchenQueue,
    :schema_type => XSD::QName.new(NsV2, "KitchenQueue"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMenuRequest,
    :schema_type => XSD::QName.new(NsV2, "GetMenuRequest"),
    :schema_element => [
      ["menuId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MenuId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMenuReply,
    :schema_type => XSD::QName.new(NsV2, "GetMenuReply"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["menu", ["Menu", XSD::QName.new(NsV2, "Menu")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfMenuCategory,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfMenuCategory"),
    :schema_element => [
      ["menuCategory", ["MenuCategory[]", XSD::QName.new(NsV2, "MenuCategory")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => MenuCategory,
    :schema_type => XSD::QName.new(NsV2, "MenuCategory"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["items", ["ArrayOfMenuItem", XSD::QName.new(NsV2, "Items")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfMenuItem,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfMenuItem"),
    :schema_element => [
      ["menuItem", ["MenuItem[]", XSD::QName.new(NsV2, "MenuItem")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => MenuItem,
    :schema_type => XSD::QName.new(NsV2, "MenuItem"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["imageId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ImageId")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["modifierMethod", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "ModifierMethod")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["priceMethod", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "PriceMethod")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOnlineOrderingMenuOptionsReply,
    :schema_type => XSD::QName.new(NsV2, "GetOnlineOrderingMenuOptionsReply"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["alternateMenus", ["ArrayOfAlternateMenu", XSD::QName.new(NsV2, "AlternateMenus")], [0, 1]],
      ["onlineOrderingMenuId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OnlineOrderingMenuId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfAlternateMenu,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfAlternateMenu"),
    :schema_element => [
      ["alternateMenu", ["AlternateMenu[]", XSD::QName.new(NsV2, "AlternateMenu")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => AlternateMenu,
    :schema_type => XSD::QName.new(NsV2, "AlternateMenu"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["days", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Days")], [0, 1]],
      ["endTime", [nil, XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["menuId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MenuId")], [0, 1]],
      ["startTime", [nil, XSD::QName.new(NsV2, "StartTime")], [0, 1]],
      ["timeType", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "TimeType")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPermissionsReply,
    :schema_type => XSD::QName.new(NsV2, "GetPermissionsReply"),
    :schema_basetype => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfPermissionn1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfPermission", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfPermissionn1jeL_SCY,
    :schema_type => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfPermissionn1jeL_SCY"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfPermission", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfPermission,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfPermission"),
    :schema_element => [
      ["permission", ["Permission[]", XSD::QName.new(NsV2, "Permission")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Permission,
    :schema_type => XSD::QName.new(NsV2, "Permission"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["isActive", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsActive")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPriceChangesReply,
    :schema_type => XSD::QName.new(NsV2, "GetPriceChangesReply"),
    :schema_basetype => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfPriceChangen1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfPriceChange", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfPriceChangen1jeL_SCY,
    :schema_type => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfPriceChangen1jeL_SCY"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfPriceChange", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfPriceChange"),
    :schema_element => [
      ["priceChange", ["PriceChange[]", XSD::QName.new(NsV2, "PriceChange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => PriceChange,
    :schema_type => XSD::QName.new(NsV2, "PriceChange"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["days", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Days")], [0, 1]],
      ["endDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "EndDate")], [0, 1]],
      ["endTime", [nil, XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["enforceDateRanges", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "EnforceDateRanges")], [0, 1]],
      ["enforceDays", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "EnforceDays")], [0, 1]],
      ["enforceTimeRanges", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "EnforceTimeRanges")], [0, 1]],
      ["isActive", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsActive")], [0, 1]],
      ["itemPriceChanges", ["ArrayOfItemPriceChange", XSD::QName.new(NsV2, "ItemPriceChanges")], [0, 1]],
      ["priceChangeDestinations", ["ArrayOfPriceChangeDestination", XSD::QName.new(NsV2, "PriceChangeDestinations")], [0, 1]],
      ["startDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "StartDate")], [0, 1]],
      ["startTime", [nil, XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfItemPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfItemPriceChange"),
    :schema_element => [
      ["itemPriceChange", ["ItemPriceChange[]", XSD::QName.new(NsV2, "ItemPriceChange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ItemPriceChange"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["componentPriceChanges", ["ArrayOfComponentPriceChange", XSD::QName.new(NsV2, "ComponentPriceChanges")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["originalPrice", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "OriginalPrice")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfComponentPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfComponentPriceChange"),
    :schema_element => [
      ["componentPriceChange", ["ComponentPriceChange[]", XSD::QName.new(NsV2, "ComponentPriceChange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ComponentPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ComponentPriceChange"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["componentId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ComponentId")], [0, 1]],
      ["componentItemPriceChanges", ["ArrayOfComponentItemPriceChange", XSD::QName.new(NsV2, "ComponentItemPriceChanges")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfComponentItemPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfComponentItemPriceChange"),
    :schema_element => [
      ["componentItemPriceChange", ["ComponentItemPriceChange[]", XSD::QName.new(NsV2, "ComponentItemPriceChange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ComponentItemPriceChange,
    :schema_type => XSD::QName.new(NsV2, "ComponentItemPriceChange"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfPriceChangeDestination,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfPriceChangeDestination"),
    :schema_element => [
      ["priceChangeDestination", ["PriceChangeDestination[]", XSD::QName.new(NsV2, "PriceChangeDestination")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => PriceChangeDestination,
    :schema_type => XSD::QName.new(NsV2, "PriceChangeDestination"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["destinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DestinationId")], [0, 1]],
      ["destinationName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "DestinationName")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSecurityLevelsReply,
    :schema_type => XSD::QName.new(NsV2, "GetSecurityLevelsReply"),
    :schema_basetype => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfSecurityLeveln1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfSecurityLevel", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfSecurityLeveln1jeL_SCY,
    :schema_type => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfSecurityLeveln1jeL_SCY"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfSecurityLevel", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfSecurityLevel,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfSecurityLevel"),
    :schema_element => [
      ["securityLevel", ["SecurityLevel[]", XSD::QName.new(NsV2, "SecurityLevel")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => SecurityLevel,
    :schema_type => XSD::QName.new(NsV2, "SecurityLevel"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["addSurcharges", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AddSurcharges")], [0, 1]],
      ["allowExcessEmployeeCardUsage", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AllowExcessEmployeeCardUsage")], [0, 1]],
      ["approveCheckout", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveCheckout")], [0, 1]],
      ["approveClockIn", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveClockIn")], [0, 1]],
      ["approveClockOut", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveClockOut")], [0, 1]],
      ["approveDiscounts", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveDiscounts")], [0, 1]],
      ["approveLoyaltyCards", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveLoyaltyCards")], [0, 1]],
      ["approveOrderRequestTime", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveOrderRequestTime")], [0, 1]],
      ["approvePromotions", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApprovePromotions")], [0, 1]],
      ["assignCharity", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AssignCharity")], [0, 1]],
      ["canAdjustTipsFromAnyTill", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanAdjustTipsFromAnyTill")], [0, 1]],
      ["canCloseOrdersAssignedToDeliveryDrivers", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanCloseOrdersAssignedToDeliveryDrivers")], [0, 1]],
      ["canOpenAnyDrawer", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanOpenAnyDrawer")], [0, 1]],
      ["deleteDeposits", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeleteDeposits")], [0, 1]],
      ["deleteDiscounts", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeleteDiscounts")], [0, 1]],
      ["deleteDonations", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeleteDonations")], [0, 1]],
      ["deletePayments", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeletePayments")], [0, 1]],
      ["deletePromotions", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeletePromotions")], [0, 1]],
      ["deleteSurcharges", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeleteSurcharges")], [0, 1]],
      ["forceAuthorization", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ForceAuthorization")], [0, 1]],
      ["forceReconciliation", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ForceReconciliation")], [0, 1]],
      ["manageCashDrawers", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ManageCashDrawers")], [0, 1]],
      ["overrideDailyLoyaltyCardLimit", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "OverrideDailyLoyaltyCardLimit")], [0, 1]],
      ["overrideMaximumTipPercent", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "OverrideMaximumTipPercent")], [0, 1]],
      ["permissions", ["ArrayOfSecurityLevelPermission", XSD::QName.new(NsV2, "Permissions")], [0, 1]],
      ["reopenOrders", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ReopenOrders")], [0, 1]],
      ["splitCheck", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "SplitCheck")], [0, 1]],
      ["voidItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "VoidItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfSecurityLevelPermission,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfSecurityLevelPermission"),
    :schema_element => [
      ["securityLevelPermission", ["SecurityLevelPermission[]", XSD::QName.new(NsV2, "SecurityLevelPermission")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => SecurityLevelPermission,
    :schema_type => XSD::QName.new(NsV2, "SecurityLevelPermission"),
    :schema_basetype => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["permissionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PermissionId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveEmployeesRequest,
    :schema_type => XSD::QName.new(NsV2, "SaveEmployeesRequest"),
    :schema_element => [
      ["employees", ["ArrayOfEmployee", XSD::QName.new(NsV2, "Employees")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveEmployeesReply,
    :schema_type => XSD::QName.new(NsV2, "SaveEmployeesReply"),
    :schema_basetype => XSD::QName.new(NsV2, "SaveNodeSettingsCollectionReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["saveResults", ["ArrayOfKeyedSettingsObjectSaveResult", XSD::QName.new(NsV2, "SaveResults")], [0, 1]],
      ["validationMessages", ["ArrayOfstring", XSD::QName.new(NsV2, "ValidationMessages")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveNodeSettingsCollectionReply,
    :schema_type => XSD::QName.new(NsV2, "SaveNodeSettingsCollectionReply"),
    :schema_basetype => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["saveResults", ["ArrayOfKeyedSettingsObjectSaveResult", XSD::QName.new(NsV2, "SaveResults")], [0, 1]],
      ["validationMessages", ["ArrayOfstring", XSD::QName.new(NsV2, "ValidationMessages")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfKeyedSettingsObjectSaveResult,
    :schema_type => XSD::QName.new(NsV2, "ArrayOfKeyedSettingsObjectSaveResult"),
    :schema_element => [
      ["keyedSettingsObjectSaveResult", ["KeyedSettingsObjectSaveResult[]", XSD::QName.new(NsV2, "KeyedSettingsObjectSaveResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => KeyedSettingsObjectSaveResult,
    :schema_type => XSD::QName.new(NsV2, "KeyedSettingsObjectSaveResult"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["originalId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OriginalId")], [0, 1]],
      ["validationMessages", ["ArrayOfstring", XSD::QName.new(NsV2, "ValidationMessages")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => Reply,
    :schema_type => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => Menu,
    :schema_type => XSD::QName.new(NsPosWebServiceSettingsVersion2Data, "Menu"),
    :schema_basetype => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["categories", ["ArrayOfMenuCategory", XSD::QName.new(NsPosWebServiceSettingsVersion2Data, "Categories")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsPosWebServiceSettingsVersion2Data, "Description")], [0, 1]],
      ["imageId", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebServiceSettingsVersion2Data, "ImageId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfstring,
    :schema_type => XSD::QName.new(NsArrays, "ArrayOfstring"),
    :schema_element => [
      ["string", "SOAP::SOAPString[]", [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => GetEmployees,
    :schema_name => XSD::QName.new(NsV2, "GetEmployees"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => GetEmployeesResponse,
    :schema_name => XSD::QName.new(NsV2, "GetEmployeesResponse"),
    :schema_element => [
      ["getEmployeesResult", ["GetEmployeesReply", XSD::QName.new(NsV2, "GetEmployeesResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetEmployeesReply,
    :schema_name => XSD::QName.new(NsV2, "GetEmployeesReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfEmployee", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfEmployeen1jeL_SCY,
    :schema_name => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfEmployeen1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfEmployee", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SettingsWebService2Reply,
    :schema_name => XSD::QName.new(NsV2, "SettingsWebService2Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfEmployee,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfEmployee"),
    :schema_element => [
      ["employee", ["Employee[]", XSD::QName.new(NsV2, "Employee")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Employee,
    :schema_name => XSD::QName.new(NsV2, "Employee"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["address1", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Address1")], [0, 1]],
      ["address2", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Address2")], [0, 1]],
      ["alternateId", ["SOAP::SOAPString", XSD::QName.new(NsV2, "AlternateId")], [0, 1]],
      ["birthDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "BirthDate")], [0, 1]],
      ["canLoginWithCard", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanLoginWithCard")], [0, 1]],
      ["canLoginWithFinger", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanLoginWithFinger")], [0, 1]],
      ["canLoginWithPin", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanLoginWithPin")], [0, 1]],
      ["cardNumber", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CardNumber")], [0, 1]],
      ["cellPhone", ["SOAP::SOAPString", XSD::QName.new(NsV2, "CellPhone")], [0, 1]],
      ["city", ["SOAP::SOAPString", XSD::QName.new(NsV2, "City")], [0, 1]],
      ["clockedInDiscountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ClockedInDiscountId")], [0, 1]],
      ["clockedOutDiscountId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ClockedOutDiscountId")], [0, 1]],
      ["displayName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "DisplayName")], [0, 1]],
      ["emailAddress", ["SOAP::SOAPString", XSD::QName.new(NsV2, "EmailAddress")], [0, 1]],
      ["exportToPayroll", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ExportToPayroll")], [0, 1]],
      ["firstName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "FirstName")], [0, 1]],
      ["healthCardExpirationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "HealthCardExpirationDate")], [0, 1]],
      ["hireDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "HireDate")], [0, 1]],
      ["homeLocationId", [nil, XSD::QName.new(NsV2, "HomeLocationId")], [0, 1]],
      ["homePhone", ["SOAP::SOAPString", XSD::QName.new(NsV2, "HomePhone")], [0, 1]],
      ["identificationVerified", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IdentificationVerified")], [0, 1]],
      ["isExempt", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsExempt")], [0, 1]],
      ["isSalaried", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsSalaried")], [0, 1]],
      ["jobs", ["ArrayOfEmployeeJob", XSD::QName.new(NsV2, "Jobs")], [0, 1]],
      ["lastName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "LastName")], [0, 1]],
      ["limitLocations", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "LimitLocations")], [0, 1]],
      ["maritalStatus", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "MaritalStatus")], [0, 1]],
      ["maximumDailyDiscountAmount", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "MaximumDailyDiscountAmount")], [0, 1]],
      ["maximumDailyDiscountCount", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MaximumDailyDiscountCount")], [0, 1]],
      ["notes", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Notes")], [0, 1]],
      ["payrollId", ["SOAP::SOAPString", XSD::QName.new(NsV2, "PayrollId")], [0, 1]],
      ["permissions", ["ArrayOfEmployeePermission", XSD::QName.new(NsV2, "Permissions")], [0, 1]],
      ["pin", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Pin")], [0, 1]],
      ["ssn", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Ssn")], [0, 1]],
      ["state", ["SOAP::SOAPString", XSD::QName.new(NsV2, "State")], [0, 1]],
      ["taxWithholdingAllowance", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "TaxWithholdingAllowance")], [0, 1]],
      ["terminated", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "Terminated")], [0, 1]],
      ["terminationDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "TerminationDate")], [0, 1]],
      ["validLocations", ["ArrayOfEmployeeLocation", XSD::QName.new(NsV2, "ValidLocations")], [0, 1]],
      ["zip", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Zip")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => KeyedSettingsObject,
    :schema_name => XSD::QName.new(NsV2, "KeyedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfEmployeeJob,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfEmployeeJob"),
    :schema_element => [
      ["employeeJob", ["EmployeeJob[]", XSD::QName.new(NsV2, "EmployeeJob")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => EmployeeJob,
    :schema_name => XSD::QName.new(NsV2, "EmployeeJob"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["jobId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "JobId")], [0, 1]],
      ["payRate", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "PayRate")], [0, 1]],
      ["securityLevelId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SecurityLevelId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfEmployeePermission,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfEmployeePermission"),
    :schema_element => [
      ["employeePermission", ["EmployeePermission[]", XSD::QName.new(NsV2, "EmployeePermission")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => EmployeePermission,
    :schema_name => XSD::QName.new(NsV2, "EmployeePermission"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["permissionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PermissionId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfEmployeeLocation,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfEmployeeLocation"),
    :schema_element => [
      ["employeeLocation", ["EmployeeLocation[]", XSD::QName.new(NsV2, "EmployeeLocation")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => EmployeeLocation,
    :schema_name => XSD::QName.new(NsV2, "EmployeeLocation"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["locationId", [nil, XSD::QName.new(NsV2, "LocationId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureOrderingOptions,
    :schema_name => XSD::QName.new(NsV2, "GetFutureOrderingOptions"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => GetFutureOrderingOptionsResponse,
    :schema_name => XSD::QName.new(NsV2, "GetFutureOrderingOptionsResponse"),
    :schema_element => [
      ["getFutureOrderingOptionsResult", ["GetFutureOrderingOptionsReply", XSD::QName.new(NsV2, "GetFutureOrderingOptionsResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetFutureOrderingOptionsReply,
    :schema_name => XSD::QName.new(NsV2, "GetFutureOrderingOptionsReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["futureOrderingOptions", ["FutureOrderingOptions", XSD::QName.new(NsV2, "FutureOrderingOptions")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => FutureOrderingOptions,
    :schema_name => XSD::QName.new(NsV2, "FutureOrderingOptions"),
    :schema_element => [
      ["allowFutureDateOrdering", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AllowFutureDateOrdering")], [0, 1]],
      ["destinations", ["ArrayOfOnlineOrderingDestination", XSD::QName.new(NsV2, "Destinations")], [0, 1]],
      ["isEnabled", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsEnabled")], [0, 1]],
      ["leadTimeThresholds", ["ArrayOfLeadTimeThreshold", XSD::QName.new(NsV2, "LeadTimeThresholds")], [0, 1]],
      ["maximumDaysInAdvance", ["SOAP::SOAPShort", XSD::QName.new(NsV2, "MaximumDaysInAdvance")], [0, 1]],
      ["minimumLeadMinutes", ["SOAP::SOAPShort", XSD::QName.new(NsV2, "MinimumLeadMinutes")], [0, 1]],
      ["minimumPrepMinutes", ["SOAP::SOAPShort", XSD::QName.new(NsV2, "MinimumPrepMinutes")], [0, 1]],
      ["prepTimeThresholds", ["ArrayOfPrepTimeThreshold", XSD::QName.new(NsV2, "PrepTimeThresholds")], [0, 1]],
      ["requiredDepositPercent", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "RequiredDepositPercent")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfOnlineOrderingDestination,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfOnlineOrderingDestination"),
    :schema_element => [
      ["onlineOrderingDestination", ["OnlineOrderingDestination[]", XSD::QName.new(NsV2, "OnlineOrderingDestination")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => OnlineOrderingDestination,
    :schema_name => XSD::QName.new(NsV2, "OnlineOrderingDestination"),
    :schema_element => [
      ["destinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DestinationId")], [0, 1]],
      ["instructions", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Instructions")], [0, 1]],
      ["isDefault", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDefault")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfLeadTimeThreshold,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfLeadTimeThreshold"),
    :schema_element => [
      ["leadTimeThreshold", ["LeadTimeThreshold[]", XSD::QName.new(NsV2, "LeadTimeThreshold")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => LeadTimeThreshold,
    :schema_name => XSD::QName.new(NsV2, "LeadTimeThreshold"),
    :schema_element => [
      ["leadMinutes", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "LeadMinutes")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfPrepTimeThreshold,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfPrepTimeThreshold"),
    :schema_element => [
      ["prepTimeThreshold", ["PrepTimeThreshold[]", XSD::QName.new(NsV2, "PrepTimeThreshold")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => PrepTimeThreshold,
    :schema_name => XSD::QName.new(NsV2, "PrepTimeThreshold"),
    :schema_element => [
      ["prepMinutes", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PrepMinutes")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetJobs,
    :schema_name => XSD::QName.new(NsV2, "GetJobs"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => GetJobsResponse,
    :schema_name => XSD::QName.new(NsV2, "GetJobsResponse"),
    :schema_element => [
      ["getJobsResult", ["GetJobsReply", XSD::QName.new(NsV2, "GetJobsResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetJobsReply,
    :schema_name => XSD::QName.new(NsV2, "GetJobsReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfJob", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfJobn1jeL_SCY,
    :schema_name => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfJobn1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfJob", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfJob,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfJob"),
    :schema_element => [
      ["job", ["Job[]", XSD::QName.new(NsV2, "Job")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Job,
    :schema_name => XSD::QName.new(NsV2, "Job"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["allowAddItem", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AllowAddItem")], [0, 1]],
      ["alternateId", ["SOAP::SOAPString", XSD::QName.new(NsV2, "AlternateId")], [0, 1]],
      ["canOpenAnyOrder", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanOpenAnyOrder")], [0, 1]],
      ["cannotClose", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CannotClose")], [0, 1]],
      ["cashDrawer", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CashDrawer")], [0, 1]],
      ["checkoutRequiresApproval", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CheckoutRequiresApproval")], [0, 1]],
      ["clockInRequiresApproval", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ClockInRequiresApproval")], [0, 1]],
      ["clockOutRequiresApproval", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ClockOutRequiresApproval")], [0, 1]],
      ["declareTips", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeclareTips")], [0, 1]],
      ["defaultScreenId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DefaultScreenId")], [0, 1]],
      ["displayColor", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DisplayColor")], [0, 1]],
      ["excludeOnSalesAndLaborReports", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ExcludeOnSalesAndLaborReports")], [0, 1]],
      ["exemptFromLaborSchedule", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ExemptFromLaborSchedule")], [0, 1]],
      ["exportCode", ["SOAP::SOAPString", XSD::QName.new(NsV2, "ExportCode")], [0, 1]],
      ["groupItemsBySeat", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "GroupItemsBySeat")], [0, 1]],
      ["isBartender", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsBartender")], [0, 1]],
      ["isDeliveryDispatcher", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeliveryDispatcher")], [0, 1]],
      ["isDeliveryDriver", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsDeliveryDriver")], [0, 1]],
      ["isHostess", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsHostess")], [0, 1]],
      ["itemLookup", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ItemLookup")], [0, 1]],
      ["laneId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "LaneId")], [0, 1]],
      ["limitShiftBreakTypes", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "LimitShiftBreakTypes")], [0, 1]],
      ["limitedDestinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "LimitedDestinationId")], [0, 1]],
      ["locationType", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "LocationType")], [0, 1]],
      ["menus", ["ArrayOfJobMenu", XSD::QName.new(NsV2, "Menus")], [0, 1]],
      ["noCashTransactions", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "NoCashTransactions")], [0, 1]],
      ["orderEntry", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "OrderEntry")], [0, 1]],
      ["orderScreenId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OrderScreenId")], [0, 1]],
      ["sectionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "SectionId")], [0, 1]],
      ["selfBanking", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "SelfBanking")], [0, 1]],
      ["selfVoid", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "SelfVoid")], [0, 1]],
      ["shiftBreakTypes", ["ArrayOfJobShiftBreakType", XSD::QName.new(NsV2, "ShiftBreakTypes")], [0, 1]],
      ["tabs", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "Tabs")], [0, 1]],
      ["training", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "Training")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => NamedSettingsObject,
    :schema_name => XSD::QName.new(NsV2, "NamedSettingsObject"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfJobMenu,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfJobMenu"),
    :schema_element => [
      ["jobMenu", ["JobMenu[]", XSD::QName.new(NsV2, "JobMenu")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => JobMenu,
    :schema_name => XSD::QName.new(NsV2, "JobMenu"),
    :schema_element => [
      ["days", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Days")], [0, 1]],
      ["menuId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MenuId")], [0, 1]],
      ["startTime", [nil, XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfJobShiftBreakType,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfJobShiftBreakType"),
    :schema_element => [
      ["jobShiftBreakType", ["JobShiftBreakType[]", XSD::QName.new(NsV2, "JobShiftBreakType")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => JobShiftBreakType,
    :schema_name => XSD::QName.new(NsV2, "JobShiftBreakType"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["shiftBreakTypeId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ShiftBreakTypeId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetKitchenQueues,
    :schema_name => XSD::QName.new(NsV2, "GetKitchenQueues"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => GetKitchenQueuesResponse,
    :schema_name => XSD::QName.new(NsV2, "GetKitchenQueuesResponse"),
    :schema_element => [
      ["getKitchenQueuesResult", ["GetKitchenQueuesReply", XSD::QName.new(NsV2, "GetKitchenQueuesResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetKitchenQueuesReply,
    :schema_name => XSD::QName.new(NsV2, "GetKitchenQueuesReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfKitchenQueue", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfKitchenQueuen1jeL_SCY,
    :schema_name => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfKitchenQueuen1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfKitchenQueue", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfKitchenQueue,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfKitchenQueue"),
    :schema_element => [
      ["kitchenQueue", ["KitchenQueue[]", XSD::QName.new(NsV2, "KitchenQueue")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => KitchenQueue,
    :schema_name => XSD::QName.new(NsV2, "KitchenQueue"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMenu,
    :schema_name => XSD::QName.new(NsV2, "GetMenu"),
    :schema_element => [
      ["request", "GetMenuRequest", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMenuRequest,
    :schema_name => XSD::QName.new(NsV2, "GetMenuRequest"),
    :schema_element => [
      ["menuId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MenuId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMenuResponse,
    :schema_name => XSD::QName.new(NsV2, "GetMenuResponse"),
    :schema_element => [
      ["getMenuResult", ["GetMenuReply", XSD::QName.new(NsV2, "GetMenuResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetMenuReply,
    :schema_name => XSD::QName.new(NsV2, "GetMenuReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["menu", ["Menu", XSD::QName.new(NsV2, "Menu")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfMenuCategory,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfMenuCategory"),
    :schema_element => [
      ["menuCategory", ["MenuCategory[]", XSD::QName.new(NsV2, "MenuCategory")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => MenuCategory,
    :schema_name => XSD::QName.new(NsV2, "MenuCategory"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["items", ["ArrayOfMenuItem", XSD::QName.new(NsV2, "Items")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfMenuItem,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfMenuItem"),
    :schema_element => [
      ["menuItem", ["MenuItem[]", XSD::QName.new(NsV2, "MenuItem")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => MenuItem,
    :schema_name => XSD::QName.new(NsV2, "MenuItem"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Description")], [0, 1]],
      ["imageId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ImageId")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["modifierMethod", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "ModifierMethod")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]],
      ["priceMethod", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "PriceMethod")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOnlineOrderingMenuOptions,
    :schema_name => XSD::QName.new(NsV2, "GetOnlineOrderingMenuOptions"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => GetOnlineOrderingMenuOptionsResponse,
    :schema_name => XSD::QName.new(NsV2, "GetOnlineOrderingMenuOptionsResponse"),
    :schema_element => [
      ["getOnlineOrderingMenuOptionsResult", ["GetOnlineOrderingMenuOptionsReply", XSD::QName.new(NsV2, "GetOnlineOrderingMenuOptionsResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetOnlineOrderingMenuOptionsReply,
    :schema_name => XSD::QName.new(NsV2, "GetOnlineOrderingMenuOptionsReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["alternateMenus", ["ArrayOfAlternateMenu", XSD::QName.new(NsV2, "AlternateMenus")], [0, 1]],
      ["onlineOrderingMenuId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OnlineOrderingMenuId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfAlternateMenu,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfAlternateMenu"),
    :schema_element => [
      ["alternateMenu", ["AlternateMenu[]", XSD::QName.new(NsV2, "AlternateMenu")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => AlternateMenu,
    :schema_name => XSD::QName.new(NsV2, "AlternateMenu"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["days", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Days")], [0, 1]],
      ["endTime", [nil, XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["menuId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "MenuId")], [0, 1]],
      ["startTime", [nil, XSD::QName.new(NsV2, "StartTime")], [0, 1]],
      ["timeType", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "TimeType")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPermissions,
    :schema_name => XSD::QName.new(NsV2, "GetPermissions"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => GetPermissionsResponse,
    :schema_name => XSD::QName.new(NsV2, "GetPermissionsResponse"),
    :schema_element => [
      ["getPermissionsResult", ["GetPermissionsReply", XSD::QName.new(NsV2, "GetPermissionsResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPermissionsReply,
    :schema_name => XSD::QName.new(NsV2, "GetPermissionsReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfPermission", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfPermissionn1jeL_SCY,
    :schema_name => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfPermissionn1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfPermission", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfPermission,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfPermission"),
    :schema_element => [
      ["permission", ["Permission[]", XSD::QName.new(NsV2, "Permission")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => Permission,
    :schema_name => XSD::QName.new(NsV2, "Permission"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["isActive", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsActive")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPriceChanges,
    :schema_name => XSD::QName.new(NsV2, "GetPriceChanges"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => GetPriceChangesResponse,
    :schema_name => XSD::QName.new(NsV2, "GetPriceChangesResponse"),
    :schema_element => [
      ["getPriceChangesResult", ["GetPriceChangesReply", XSD::QName.new(NsV2, "GetPriceChangesResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetPriceChangesReply,
    :schema_name => XSD::QName.new(NsV2, "GetPriceChangesReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfPriceChange", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfPriceChangen1jeL_SCY,
    :schema_name => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfPriceChangen1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfPriceChange", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfPriceChange,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfPriceChange"),
    :schema_element => [
      ["priceChange", ["PriceChange[]", XSD::QName.new(NsV2, "PriceChange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => PriceChange,
    :schema_name => XSD::QName.new(NsV2, "PriceChange"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["days", ["SOAP::SOAPUnsignedByte", XSD::QName.new(NsV2, "Days")], [0, 1]],
      ["endDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "EndDate")], [0, 1]],
      ["endTime", [nil, XSD::QName.new(NsV2, "EndTime")], [0, 1]],
      ["enforceDateRanges", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "EnforceDateRanges")], [0, 1]],
      ["enforceDays", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "EnforceDays")], [0, 1]],
      ["enforceTimeRanges", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "EnforceTimeRanges")], [0, 1]],
      ["isActive", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "IsActive")], [0, 1]],
      ["itemPriceChanges", ["ArrayOfItemPriceChange", XSD::QName.new(NsV2, "ItemPriceChanges")], [0, 1]],
      ["priceChangeDestinations", ["ArrayOfPriceChangeDestination", XSD::QName.new(NsV2, "PriceChangeDestinations")], [0, 1]],
      ["startDate", ["SOAP::SOAPDateTime", XSD::QName.new(NsV2, "StartDate")], [0, 1]],
      ["startTime", [nil, XSD::QName.new(NsV2, "StartTime")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfItemPriceChange,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfItemPriceChange"),
    :schema_element => [
      ["itemPriceChange", ["ItemPriceChange[]", XSD::QName.new(NsV2, "ItemPriceChange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ItemPriceChange,
    :schema_name => XSD::QName.new(NsV2, "ItemPriceChange"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["componentPriceChanges", ["ArrayOfComponentPriceChange", XSD::QName.new(NsV2, "ComponentPriceChanges")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["originalPrice", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "OriginalPrice")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfComponentPriceChange,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfComponentPriceChange"),
    :schema_element => [
      ["componentPriceChange", ["ComponentPriceChange[]", XSD::QName.new(NsV2, "ComponentPriceChange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ComponentPriceChange,
    :schema_name => XSD::QName.new(NsV2, "ComponentPriceChange"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["componentId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ComponentId")], [0, 1]],
      ["componentItemPriceChanges", ["ArrayOfComponentItemPriceChange", XSD::QName.new(NsV2, "ComponentItemPriceChanges")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfComponentItemPriceChange,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfComponentItemPriceChange"),
    :schema_element => [
      ["componentItemPriceChange", ["ComponentItemPriceChange[]", XSD::QName.new(NsV2, "ComponentItemPriceChange")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => ComponentItemPriceChange,
    :schema_name => XSD::QName.new(NsV2, "ComponentItemPriceChange"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["itemId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "ItemId")], [0, 1]],
      ["price", ["SOAP::SOAPDecimal", XSD::QName.new(NsV2, "Price")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfPriceChangeDestination,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfPriceChangeDestination"),
    :schema_element => [
      ["priceChangeDestination", ["PriceChangeDestination[]", XSD::QName.new(NsV2, "PriceChangeDestination")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => PriceChangeDestination,
    :schema_name => XSD::QName.new(NsV2, "PriceChangeDestination"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["destinationId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "DestinationId")], [0, 1]],
      ["destinationName", ["SOAP::SOAPString", XSD::QName.new(NsV2, "DestinationName")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSecurityLevels,
    :schema_name => XSD::QName.new(NsV2, "GetSecurityLevels"),
    :schema_element => []
  )

  LiteralRegistry.register(
    :class => GetSecurityLevelsResponse,
    :schema_name => XSD::QName.new(NsV2, "GetSecurityLevelsResponse"),
    :schema_element => [
      ["getSecurityLevelsResult", ["GetSecurityLevelsReply", XSD::QName.new(NsV2, "GetSecurityLevelsResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetSecurityLevelsReply,
    :schema_name => XSD::QName.new(NsV2, "GetSecurityLevelsReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfSecurityLevel", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => GetNodeSettingsCollectionReplyOfSecurityLeveln1jeL_SCY,
    :schema_name => XSD::QName.new(NsV2, "GetNodeSettingsCollectionReplyOfSecurityLeveln1jeL_SCY"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["collection", ["ArrayOfSecurityLevel", XSD::QName.new(NsV2, "Collection")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfSecurityLevel,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfSecurityLevel"),
    :schema_element => [
      ["securityLevel", ["SecurityLevel[]", XSD::QName.new(NsV2, "SecurityLevel")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => SecurityLevel,
    :schema_name => XSD::QName.new(NsV2, "SecurityLevel"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["addSurcharges", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AddSurcharges")], [0, 1]],
      ["allowExcessEmployeeCardUsage", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AllowExcessEmployeeCardUsage")], [0, 1]],
      ["approveCheckout", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveCheckout")], [0, 1]],
      ["approveClockIn", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveClockIn")], [0, 1]],
      ["approveClockOut", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveClockOut")], [0, 1]],
      ["approveDiscounts", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveDiscounts")], [0, 1]],
      ["approveLoyaltyCards", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveLoyaltyCards")], [0, 1]],
      ["approveOrderRequestTime", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApproveOrderRequestTime")], [0, 1]],
      ["approvePromotions", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ApprovePromotions")], [0, 1]],
      ["assignCharity", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "AssignCharity")], [0, 1]],
      ["canAdjustTipsFromAnyTill", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanAdjustTipsFromAnyTill")], [0, 1]],
      ["canCloseOrdersAssignedToDeliveryDrivers", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanCloseOrdersAssignedToDeliveryDrivers")], [0, 1]],
      ["canOpenAnyDrawer", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "CanOpenAnyDrawer")], [0, 1]],
      ["deleteDeposits", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeleteDeposits")], [0, 1]],
      ["deleteDiscounts", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeleteDiscounts")], [0, 1]],
      ["deleteDonations", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeleteDonations")], [0, 1]],
      ["deletePayments", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeletePayments")], [0, 1]],
      ["deletePromotions", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeletePromotions")], [0, 1]],
      ["deleteSurcharges", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "DeleteSurcharges")], [0, 1]],
      ["forceAuthorization", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ForceAuthorization")], [0, 1]],
      ["forceReconciliation", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ForceReconciliation")], [0, 1]],
      ["manageCashDrawers", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ManageCashDrawers")], [0, 1]],
      ["overrideDailyLoyaltyCardLimit", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "OverrideDailyLoyaltyCardLimit")], [0, 1]],
      ["overrideMaximumTipPercent", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "OverrideMaximumTipPercent")], [0, 1]],
      ["permissions", ["ArrayOfSecurityLevelPermission", XSD::QName.new(NsV2, "Permissions")], [0, 1]],
      ["reopenOrders", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "ReopenOrders")], [0, 1]],
      ["splitCheck", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "SplitCheck")], [0, 1]],
      ["voidItems", ["SOAP::SOAPBoolean", XSD::QName.new(NsV2, "VoidItems")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfSecurityLevelPermission,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfSecurityLevelPermission"),
    :schema_element => [
      ["securityLevelPermission", ["SecurityLevelPermission[]", XSD::QName.new(NsV2, "SecurityLevelPermission")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => SecurityLevelPermission,
    :schema_name => XSD::QName.new(NsV2, "SecurityLevelPermission"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["permissionId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "PermissionId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveEmployees,
    :schema_name => XSD::QName.new(NsV2, "SaveEmployees"),
    :schema_element => [
      ["request", "SaveEmployeesRequest", [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveEmployeesRequest,
    :schema_name => XSD::QName.new(NsV2, "SaveEmployeesRequest"),
    :schema_element => [
      ["employees", ["ArrayOfEmployee", XSD::QName.new(NsV2, "Employees")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveEmployeesResponse,
    :schema_name => XSD::QName.new(NsV2, "SaveEmployeesResponse"),
    :schema_element => [
      ["saveEmployeesResult", ["SaveEmployeesReply", XSD::QName.new(NsV2, "SaveEmployeesResult")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveEmployeesReply,
    :schema_name => XSD::QName.new(NsV2, "SaveEmployeesReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["saveResults", ["ArrayOfKeyedSettingsObjectSaveResult", XSD::QName.new(NsV2, "SaveResults")], [0, 1]],
      ["validationMessages", ["ArrayOfstring", XSD::QName.new(NsV2, "ValidationMessages")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => SaveNodeSettingsCollectionReply,
    :schema_name => XSD::QName.new(NsV2, "SaveNodeSettingsCollectionReply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]],
      ["saveResults", ["ArrayOfKeyedSettingsObjectSaveResult", XSD::QName.new(NsV2, "SaveResults")], [0, 1]],
      ["validationMessages", ["ArrayOfstring", XSD::QName.new(NsV2, "ValidationMessages")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfKeyedSettingsObjectSaveResult,
    :schema_name => XSD::QName.new(NsV2, "ArrayOfKeyedSettingsObjectSaveResult"),
    :schema_element => [
      ["keyedSettingsObjectSaveResult", ["KeyedSettingsObjectSaveResult[]", XSD::QName.new(NsV2, "KeyedSettingsObjectSaveResult")], [0, nil]]
    ]
  )

  LiteralRegistry.register(
    :class => KeyedSettingsObjectSaveResult,
    :schema_name => XSD::QName.new(NsV2, "KeyedSettingsObjectSaveResult"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["originalId", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "OriginalId")], [0, 1]],
      ["validationMessages", ["ArrayOfstring", XSD::QName.new(NsV2, "ValidationMessages")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => Reply,
    :schema_name => XSD::QName.new(NsPosWebService, "Reply"),
    :schema_element => [
      ["message", ["SOAP::SOAPString", XSD::QName.new(NsPosWebService, "Message")], [0, 1]],
      ["resultCode", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebService, "ResultCode")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => Menu,
    :schema_name => XSD::QName.new(NsPosWebServiceSettingsVersion2Data, "Menu"),
    :schema_element => [
      ["id", ["SOAP::SOAPInt", XSD::QName.new(NsV2, "Id")], [0, 1]],
      ["name", ["SOAP::SOAPString", XSD::QName.new(NsV2, "Name")], [0, 1]],
      ["categories", ["ArrayOfMenuCategory", XSD::QName.new(NsPosWebServiceSettingsVersion2Data, "Categories")], [0, 1]],
      ["description", ["SOAP::SOAPString", XSD::QName.new(NsPosWebServiceSettingsVersion2Data, "Description")], [0, 1]],
      ["imageId", ["SOAP::SOAPInt", XSD::QName.new(NsPosWebServiceSettingsVersion2Data, "ImageId")], [0, 1]]
    ]
  )

  LiteralRegistry.register(
    :class => ArrayOfstring,
    :schema_name => XSD::QName.new(NsArrays, "ArrayOfstring"),
    :schema_element => [
      ["string", "SOAP::SOAPString[]", [0, nil]]
    ]
  )
end
